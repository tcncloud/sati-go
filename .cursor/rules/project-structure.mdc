---
alwaysApply: true
description: Project structure and architecture guidelines for sati-go
---

# Project Structure and Architecture

## Directory Structure
```
sati-go/
├── cmd/sati-client/          # Main CLI application entry point
├── internal/genproto/        # Generated protobuf code
├── pkg/
│   ├── cmd/                  # CLI command implementations
│   │   ├── common.go         # Shared helper functions and constants
│   │   ├── root.go           # Root command definition
│   │   └── *.go             # Individual command files
│   ├── domain/               # Domain layer (business logic)
│   │   ├── domain.go         # Main domain entity
│   │   └── module.go         # FX module definition
│   ├── ports/                # Port interfaces and types
│   │   ├── interface.go      # Client interface definition
│   │   ├── types.go          # All custom types and parameters
│   │   ├── config.go         # Configuration interfaces
│   │   └── doc.go            # Package documentation
│   └── sati/                 # Infrastructure adapters
│       ├── client/           # gRPC client wrapper
│       │   ├── client.go     # Core client implementation
│       │   └── client_test.go # Client tests
│       └── config/           # Configuration management
│           ├── config.go     # Configuration implementation
│           ├── module.go     # FX module definition
│           └── config_test.go # Configuration tests
└── .cursor/rules/            # Cursor IDE rules
```

## Key Files
- [main.go](mdc:cmd/sati-client/main.go) - CLI application entry point
- [root.go](mdc:pkg/cmd/root.go) - Cobra root command and subcommand registration
- [common.go](mdc:pkg/cmd/common.go) - Shared utilities, constants, and helper functions
- [client.go](mdc:pkg/sati/client/client.go) - Core gRPC client implementation
- [interface.go](mdc:pkg/ports/interface.go) - Client interface definition
- [types.go](mdc:pkg/ports/types.go) - All custom types and parameters

## Architecture Patterns

### Hexagonal Architecture (Ports and Adapters)
The project follows hexagonal architecture with clear separation of concerns:

#### Domain Layer (`pkg/domain/`)
- **Purpose**: Contains business logic and domain entities
- **Dependencies**: Only imports `pkg/ports/` and standard library
- **Files**: `domain.go` (main entity), `module.go` (FX module)

#### Ports Layer (`pkg/ports/`)
- **Purpose**: Define interfaces and types that the application depends on
- **Pattern**: Pure interfaces with no implementation details
- **Files**: 
  - `interface.go` (client interface definition)
  - `types.go` (all custom types and parameters)
  - `config.go` (configuration interfaces)
  - `doc.go` (package documentation)

#### Adapters Layer (`pkg/sati/`)
- **Purpose**: Implements ports interfaces with concrete implementations
- **Pattern**: Handles external concerns (gRPC, file I/O, etc.)
- **Structure**: `client/` (gRPC client), `config/` (configuration management)

#### Interface Layer (`pkg/cmd/`)
- **Purpose**: CLI interface and user interaction
- **Pattern**: Commands that orchestrate domain operations through ports

### Command Structure
- Each command is implemented in its own file (e.g., `get_agent_by_id.go`)
- Commands use the common helper functions from [common.go](mdc:pkg/cmd/common.go)
- All commands follow the same pattern: validation → client creation → API call → response handling

### Client Layer
- [client.go](mdc:pkg/sati/client/client.go) wraps the gRPC client with custom types
- Implements [ClientInterface](mdc:pkg/ports/interface.go) defined in ports package
- Custom parameter and result types defined in [types.go](mdc:pkg/ports/types.go)
- Error handling with static error constants
- Proper connection management with `handleClientClose()`

### Configuration
- Configuration loaded from base64-encoded JSON files
- TLS settings with minimum version requirements
- mTLS authentication for gRPC connections

## Current Implementation Status

### ✅ Completed Refactoring
- **Clean Architecture**: Successfully implemented with proper layer separation
- **Type Organization**: All custom types moved to `pkg/ports/types.go`
- **Interface Definition**: `ClientInterface` defined in `pkg/ports/interface.go`
- **Command Updates**: All CLI commands updated to use ports types
- **Build Status**: Project builds successfully with no errors

### Architecture Benefits
- **Testability**: Easy to mock `ClientInterface` for testing
- **Maintainability**: Clear separation of concerns
- **Flexibility**: Can swap implementations without changing business logic
- **Type Safety**: All types centralized in ports package

## Code Organization Principles
- **Dependency Inversion**: Dependencies point inward toward the domain
- **Ports and Adapters**: Use interfaces to decouple layers
- **Single Responsibility**: Each file has one clear purpose
- **DRY Principle**: Shared logic in [common.go](mdc:pkg/cmd/common.go)
- **Consistent Patterns**: Uniform patterns across all command implementations
- **Clear Boundaries**: Maintain clear separation between layers