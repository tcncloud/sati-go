---
alwaysApply: true
description: Project structure and architecture guidelines for sati-go
---

# Project Structure and Architecture

## Directory Structure
```
sati-go/
├── cmd/sati-client/          # Main CLI application entry point
├── internal/genproto/        # Generated protobuf code
├── pkg/
│   ├── cmd/                  # CLI command implementations
│   │   ├── common.go         # Shared helper functions and constants
│   │   └── *.go             # Individual command files
│   ├── sati/
│   │   ├── client/           # gRPC client wrapper
│   │   └── config/           # Configuration management
└── .cursor/rules/            # Cursor IDE rules
```

## Key Files
- [main.go](mdc:cmd/sati-client/main.go) - CLI application entry point
- [root.go](mdc:pkg/cmd/root.go) - Cobra root command and subcommand registration
- [common.go](mdc:pkg/cmd/common.go) - Shared utilities, constants, and helper functions
- [client.go](mdc:pkg/sati/client/client.go) - Core gRPC client implementation
- [types.go](mdc:pkg/sati/client/types.go) - Client-side type definitions

## Architecture Patterns

### Command Structure
- Each command is implemented in its own file (e.g., `get_agent_by_id.go`)
- Commands use the common helper functions from [common.go](mdc:pkg/cmd/common.go)
- All commands follow the same pattern: validation → client creation → API call → response handling

### Client Layer
- [client.go](mdc:pkg/sati/client/client.go) wraps the gRPC client with custom types
- Custom parameter and result types defined in [types.go](mdc:pkg/sati/client/types.go)
- Error handling with static error constants
- Proper connection management with `handleClientClose()`

### Configuration
- Configuration loaded from base64-encoded JSON files
- TLS settings with minimum version requirements
- mTLS authentication for gRPC connections

## Code Organization Principles
- Single responsibility: each file has one clear purpose
- DRY principle: shared logic in [common.go](mdc:pkg/cmd/common.go)
- Consistent patterns across all command implementations
- Clear separation between CLI layer, client layer, and gRPC layer