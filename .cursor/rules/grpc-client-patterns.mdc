---
globs: pkg/sati/client/*.go,pkg/cmd/*.go,cmd/sati-client/*.go
description: gRPC client patterns and command implementation guidelines
---

# gRPC Client Patterns and Command Implementation

## Client Implementation Patterns

### Client Creation
```go
client, err := createClient(configPath)
if err != nil {
    return err
}
defer handleClientClose(client)
```

### Context Management
```go
ctx, cancel := createContext(DefaultTimeout) // or LongTimeout for streaming
defer cancel()
```

### Error Handling
- Use static error constants from [client.go](mdc:pkg/sati/client/client.go)
- Always check errors before proceeding
- Use `handleClientClose(client)` for proper connection cleanup

## Command Implementation Pattern

### Standard Command Structure
```go
func CommandNameCmd(configPath *string) *cobra.Command {
    var param1, param2 string
    
    cmd := &cobra.Command{
        Use:   "command-name",
        Short: "Description of what the command does",
        RunE: func(cmd *cobra.Command, args []string) error {
            // Validation
            if param1 == "" {
                return ErrParamRequired
            }
            
            // Client setup
            client, err := createClient(configPath)
            if err != nil {
                return err
            }
            defer handleClientClose(client)
            
            // Context setup
            ctx, cancel := createContext(DefaultTimeout)
            defer cancel()
            
            // API call and response handling
            // ...
            
            return nil
        },
    }
    
    // Flag definitions
    cmd.Flags().StringVar(&param1, "param1", "", "Description")
    markFlagRequired(cmd, "param1")
    
    return cmd
}
```

## Response Handling

### JSON Output
```go
if OutputFormat == OutputFormatJSON {
    data, err := json.MarshalIndent(response, "", "  ")
    if err != nil {
        return err
    }
    fmt.Println(string(data))
} else {
    // Human-readable output
}
```

### Streaming Responses
```go
resultsChan := client.StreamingMethod(ctx, params)
for result := range resultsChan {
    if result.Error != nil {
        return fmt.Errorf("streaming error: %w", result.Error)
    }
    // Process result
}
```

## Type Definitions
- Custom parameter types in [types.go](mdc:pkg/ports/types.go)
- Use pointers for optional fields
- Follow Go naming conventions (e.g., `GetAgentByID` not `GetAgentById`)
- Use descriptive type names that clearly indicate their purpose
- All types are in the `ports` package following clean architecture

## Current Implementation Patterns

### Client Interface Usage
```go
// Commands use ports.ClientInterface for abstraction
func SomeCommand(configPath *string) *cobra.Command {
    cmd := &cobra.Command{
        RunE: func(cmd *cobra.Command, args []string) error {
            // Create client using helper function
            client, err := createClient(configPath)
            if err != nil {
                return err
            }
            defer handleClientClose(client)
            
            // Use ports types for parameters
            params := ports.SomeParams{
                Field1: value1,
                Field2: value2,
            }
            
            // Call client method
            result, err := client.SomeMethod(ctx, params)
            if err != nil {
                return err
            }
            
            // Handle result
            return nil
        },
    }
    return cmd
}
```

### Type Usage
- **Parameters**: Always use `ports.XxxParams` types
- **Results**: Always use `ports.XxxResult` types
- **Client Creation**: Use `saticlient.NewClient(cfg)` (concrete implementation)
- **Interface**: Use `ports.ClientInterface` for abstraction

### Import Structure
```go
import (
    "github.com/spf13/cobra"
    "github.com/tcncloud/sati-go/pkg/ports"           // For types and interfaces
    saticlient "github.com/tcncloud/sati-go/pkg/sati/client"  // For concrete client
    saticonfig "github.com/tcncloud/sati-go/pkg/sati/config"   // For config
)
```

## Testing Patterns
- Use `setupTestClient()` for consistent test setup
- Mock interface methods must match exactly (including capitalization)
- Group related tests in focused test functions
- Use descriptive test names and proper assertions
- See [testing-guidelines.mdc](mdc:.cursor/rules/testing-guidelines.mdc) for comprehensive testing patterns