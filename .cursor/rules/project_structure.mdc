---
description:
globs:
alwaysApply: false
---
# Sati-Go Project Structure

This document outlines the main components of the `sati-go` project.

## Entrypoint

The main application entrypoint is [`main.go`](mdc:cmd/sati-client/main.go). It simply calls `Execute` from the `pkg/cmd` package to run the root Cobra command.

## CLI Commands (`pkg/cmd`)

This package contains all the CLI command definitions using the Cobra library.

- [`root.go`](mdc:pkg/cmd/root.go): Defines the root `sati-client` command, persistent flags (like `--config` and `--output`), and adds all subcommands.
- **Subcommands** (e.g., [`dial.go`](mdc:pkg/cmd/dial.go), [`list_agents.go`](mdc:pkg/cmd/list_agents.go)): Each file defines a specific subcommand (like `dial`, `list-agents`). They typically:
    1. Define flags using `cmd.Flags()`.
    2. In their `RunE` function:
        - Load the configuration using `saticonfig.LoadConfig`.
        - Create an API client instance using `saticlient.NewClient`.
        - Build the appropriate gRPC request protobuf struct from the flags.
        - Call the corresponding method on the `saticlient.Client`.
        - Format and print the response (text or JSON).

## Configuration (`pkg/sati/config`)

This package handles loading and parsing the application configuration.

- [`config.go`](mdc:pkg/sati/config/config.go): Defines the `Config` struct and provides functions (`LoadConfig`, `NewConfigFromString`) to parse the base64-encoded JSON configuration required by the client.

## API Client (`pkg/sati/client`)

This package provides a reusable client for interacting with the underlying Sati GateService gRPC API.

- [`client.go`](mdc:pkg/sati/client/client.go): Defines the `Client` struct which wraps the gRPC connection and the generated `GateServiceClient`. It includes:
    - `NewClient`: Constructor that takes a `*saticonfig.Config` and sets up the gRPC connection (TLS credentials, endpoint parsing).
    - Methods for each GateService API call (e.g., `Dial`, `ListAgents`, `UpdateAgentStatus`). These methods take request protobufs and return response protobufs or streams.
    - `IsStreamEnd`: Utility function to check for the end of a gRPC stream.

## Protobuf Definitions

The Go code for Protobuf messages and gRPC services is *not* stored locally in `internal/genproto`. Instead, it is imported directly from pre-generated modules hosted on Buf Schema Registry (e.g., `buf.build/gen/go/tcn/exileapi/...`).
