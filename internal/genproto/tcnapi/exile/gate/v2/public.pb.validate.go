// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tcnapi/exile/gate/v2/public.proto

package gatev2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TimeRange with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeRange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeRangeMultiError, or nil
// if none found.
func (m *TimeRange) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeRangeValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeRangeValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeRangeValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeRangeValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeRangeValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeRangeValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimeRangeMultiError(errors)
	}

	return nil
}

// TimeRangeMultiError is an error wrapping multiple validation errors returned
// by TimeRange.ValidateAll() if the designated constraints aren't met.
type TimeRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeRangeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeRangeMultiError) AllErrors() []error { return m }

// TimeRangeValidationError is the validation error returned by
// TimeRange.Validate if the designated constraints aren't met.
type TimeRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeRangeValidationError) ErrorName() string { return "TimeRangeValidationError" }

// Error satisfies the builtin error interface
func (e TimeRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeRangeValidationError{}

// Validate checks the field values on LogRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogRequestMultiError, or
// nil if none found.
func (m *LogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Payload

	if len(errors) > 0 {
		return LogRequestMultiError(errors)
	}

	return nil
}

// LogRequestMultiError is an error wrapping multiple validation errors
// returned by LogRequest.ValidateAll() if the designated constraints aren't met.
type LogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogRequestMultiError) AllErrors() []error { return m }

// LogRequestValidationError is the validation error returned by
// LogRequest.Validate if the designated constraints aren't met.
type LogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogRequestValidationError) ErrorName() string { return "LogRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogRequestValidationError{}

// Validate checks the field values on LogResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogResponseMultiError, or
// nil if none found.
func (m *LogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogResponseMultiError(errors)
	}

	return nil
}

// LogResponseMultiError is an error wrapping multiple validation errors
// returned by LogResponse.ValidateAll() if the designated constraints aren't met.
type LogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogResponseMultiError) AllErrors() []error { return m }

// LogResponseValidationError is the validation error returned by
// LogResponse.Validate if the designated constraints aren't met.
type LogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogResponseValidationError) ErrorName() string { return "LogResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogResponseValidationError{}

// Validate checks the field values on PollEventsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PollEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PollEventsRequestMultiError, or nil if none found.
func (m *PollEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PollEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventCount

	if len(errors) > 0 {
		return PollEventsRequestMultiError(errors)
	}

	return nil
}

// PollEventsRequestMultiError is an error wrapping multiple validation errors
// returned by PollEventsRequest.ValidateAll() if the designated constraints
// aren't met.
type PollEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollEventsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollEventsRequestMultiError) AllErrors() []error { return m }

// PollEventsRequestValidationError is the validation error returned by
// PollEventsRequest.Validate if the designated constraints aren't met.
type PollEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollEventsRequestValidationError) ErrorName() string {
	return "PollEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PollEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollEventsRequestValidationError{}

// Validate checks the field values on PollEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PollEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PollEventsResponseMultiError, or nil if none found.
func (m *PollEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PollEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PollEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PollEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PollEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PollEventsResponseMultiError(errors)
	}

	return nil
}

// PollEventsResponseMultiError is an error wrapping multiple validation errors
// returned by PollEventsResponse.ValidateAll() if the designated constraints
// aren't met.
type PollEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollEventsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollEventsResponseMultiError) AllErrors() []error { return m }

// PollEventsResponseValidationError is the validation error returned by
// PollEventsResponse.Validate if the designated constraints aren't met.
type PollEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollEventsResponseValidationError) ErrorName() string {
	return "PollEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PollEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollEventsResponseValidationError{}

// Validate checks the field values on StreamJobsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StreamJobsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamJobsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamJobsRequestMultiError, or nil if none found.
func (m *StreamJobsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StreamJobsRequestMultiError(errors)
	}

	return nil
}

// StreamJobsRequestMultiError is an error wrapping multiple validation errors
// returned by StreamJobsRequest.ValidateAll() if the designated constraints
// aren't met.
type StreamJobsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsRequestMultiError) AllErrors() []error { return m }

// StreamJobsRequestValidationError is the validation error returned by
// StreamJobsRequest.Validate if the designated constraints aren't met.
type StreamJobsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsRequestValidationError) ErrorName() string {
	return "StreamJobsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsRequestValidationError{}

// Validate checks the field values on StreamJobsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamJobsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamJobsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamJobsResponseMultiError, or nil if none found.
func (m *StreamJobsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	switch v := m.Task.(type) {
	case *StreamJobsResponse_ListPools:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListPools()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "ListPools",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "ListPools",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListPools()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "ListPools",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_GetPoolStatus:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetPoolStatus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "GetPoolStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "GetPoolStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetPoolStatus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "GetPoolStatus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_GetPoolRecords:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetPoolRecords()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "GetPoolRecords",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "GetPoolRecords",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetPoolRecords()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "GetPoolRecords",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_SearchRecords:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSearchRecords()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "SearchRecords",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "SearchRecords",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSearchRecords()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "SearchRecords",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_GetRecordFields:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetRecordFields()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "GetRecordFields",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "GetRecordFields",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetRecordFields()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "GetRecordFields",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_SetRecordFields:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetRecordFields()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "SetRecordFields",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "SetRecordFields",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetRecordFields()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "SetRecordFields",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_CreatePayment:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreatePayment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "CreatePayment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "CreatePayment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatePayment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "CreatePayment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_PopAccount:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPopAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "PopAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "PopAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPopAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "PopAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_ExecuteLogic:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExecuteLogic()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "ExecuteLogic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "ExecuteLogic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExecuteLogic()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "ExecuteLogic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_Info:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_Shutdown:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShutdown()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "Shutdown",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "Shutdown",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShutdown()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "Shutdown",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_Logging:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLogging()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "Logging",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "Logging",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLogging()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "Logging",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_Diagnostics:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDiagnostics()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "Diagnostics",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "Diagnostics",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDiagnostics()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "Diagnostics",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_ListTenantLogs:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListTenantLogs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "ListTenantLogs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "ListTenantLogs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListTenantLogs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "ListTenantLogs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamJobsResponse_SetLogLevel:
		if v == nil {
			err := StreamJobsResponseValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetLogLevel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "SetLogLevel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponseValidationError{
						field:  "SetLogLevel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetLogLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponseValidationError{
					field:  "SetLogLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StreamJobsResponseMultiError(errors)
	}

	return nil
}

// StreamJobsResponseMultiError is an error wrapping multiple validation errors
// returned by StreamJobsResponse.ValidateAll() if the designated constraints
// aren't met.
type StreamJobsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponseMultiError) AllErrors() []error { return m }

// StreamJobsResponseValidationError is the validation error returned by
// StreamJobsResponse.Validate if the designated constraints aren't met.
type StreamJobsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponseValidationError) ErrorName() string {
	return "StreamJobsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponseValidationError{}

// Validate checks the field values on SubmitJobResultsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitJobResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequestMultiError, or nil if none found.
func (m *SubmitJobResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for EndOfTransmission

	switch v := m.Result.(type) {
	case *SubmitJobResultsRequest_ListPoolsResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListPoolsResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "ListPoolsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "ListPoolsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListPoolsResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "ListPoolsResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_GetPoolStatusResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetPoolStatusResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "GetPoolStatusResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "GetPoolStatusResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetPoolStatusResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "GetPoolStatusResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_GetPoolRecordsResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetPoolRecordsResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "GetPoolRecordsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "GetPoolRecordsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetPoolRecordsResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "GetPoolRecordsResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_SearchRecordResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSearchRecordResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "SearchRecordResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "SearchRecordResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSearchRecordResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "SearchRecordResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_GetRecordFieldsResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetRecordFieldsResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "GetRecordFieldsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "GetRecordFieldsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetRecordFieldsResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "GetRecordFieldsResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_SetRecordFieldsResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetRecordFieldsResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "SetRecordFieldsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "SetRecordFieldsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetRecordFieldsResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "SetRecordFieldsResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_CreatePaymentResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreatePaymentResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "CreatePaymentResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "CreatePaymentResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatePaymentResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "CreatePaymentResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_PopAccountResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPopAccountResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "PopAccountResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "PopAccountResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPopAccountResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "PopAccountResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_ExecuteLogicResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExecuteLogicResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "ExecuteLogicResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "ExecuteLogicResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExecuteLogicResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "ExecuteLogicResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_ErrorResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetErrorResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "ErrorResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "ErrorResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetErrorResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "ErrorResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_InfoResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInfoResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "InfoResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "InfoResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInfoResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "InfoResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_ShutdownResult:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShutdownResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "ShutdownResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "ShutdownResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShutdownResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "ShutdownResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_LoggingResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLoggingResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "LoggingResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "LoggingResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLoggingResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "LoggingResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_DiagnosticsResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDiagnosticsResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "DiagnosticsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "DiagnosticsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDiagnosticsResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "DiagnosticsResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_ListTenantLogsResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListTenantLogsResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "ListTenantLogsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "ListTenantLogsResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListTenantLogsResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "ListTenantLogsResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitJobResultsRequest_SetLogLevelResult_:
		if v == nil {
			err := SubmitJobResultsRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetLogLevelResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "SetLogLevelResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequestValidationError{
						field:  "SetLogLevelResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetLogLevelResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequestValidationError{
					field:  "SetLogLevelResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SubmitJobResultsRequestMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequestMultiError is an error wrapping multiple validation
// errors returned by SubmitJobResultsRequest.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequestMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequestValidationError is the validation error returned by
// SubmitJobResultsRequest.Validate if the designated constraints aren't met.
type SubmitJobResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequestValidationError) ErrorName() string {
	return "SubmitJobResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequestValidationError{}

// Validate checks the field values on SubmitJobResultsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitJobResultsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJobResultsResponseMultiError, or nil if none found.
func (m *SubmitJobResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubmitJobResultsResponseMultiError(errors)
	}

	return nil
}

// SubmitJobResultsResponseMultiError is an error wrapping multiple validation
// errors returned by SubmitJobResultsResponse.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsResponseMultiError) AllErrors() []error { return m }

// SubmitJobResultsResponseValidationError is the validation error returned by
// SubmitJobResultsResponse.Validate if the designated constraints aren't met.
type SubmitJobResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsResponseValidationError) ErrorName() string {
	return "SubmitJobResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsResponseValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Entity.(type) {
	case *Event_AgentCall:
		if v == nil {
			err := EventValidationError{
				field:  "Entity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAgentCall()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AgentCall",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AgentCall",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAgentCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "AgentCall",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_TelephonyResult:
		if v == nil {
			err := EventValidationError{
				field:  "Entity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTelephonyResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TelephonyResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TelephonyResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTelephonyResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "TelephonyResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_AgentResponse:
		if v == nil {
			err := EventValidationError{
				field:  "Entity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAgentResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AgentResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AgentResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAgentResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "AgentResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_TransferInstance:
		if v == nil {
			err := EventValidationError{
				field:  "Entity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransferInstance()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TransferInstance",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TransferInstance",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransferInstance()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "TransferInstance",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on RemoveScrubListEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveScrubListEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveScrubListEntriesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveScrubListEntriesRequestMultiError, or nil if none found.
func (m *RemoveScrubListEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveScrubListEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScrubListId

	if len(errors) > 0 {
		return RemoveScrubListEntriesRequestMultiError(errors)
	}

	return nil
}

// RemoveScrubListEntriesRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveScrubListEntriesRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveScrubListEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveScrubListEntriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveScrubListEntriesRequestMultiError) AllErrors() []error { return m }

// RemoveScrubListEntriesRequestValidationError is the validation error
// returned by RemoveScrubListEntriesRequest.Validate if the designated
// constraints aren't met.
type RemoveScrubListEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveScrubListEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveScrubListEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveScrubListEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveScrubListEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveScrubListEntriesRequestValidationError) ErrorName() string {
	return "RemoveScrubListEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveScrubListEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveScrubListEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveScrubListEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveScrubListEntriesRequestValidationError{}

// Validate checks the field values on RemoveScrubListEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveScrubListEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveScrubListEntriesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveScrubListEntriesResponseMultiError, or nil if none found.
func (m *RemoveScrubListEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveScrubListEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveScrubListEntriesResponseMultiError(errors)
	}

	return nil
}

// RemoveScrubListEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveScrubListEntriesResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveScrubListEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveScrubListEntriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveScrubListEntriesResponseMultiError) AllErrors() []error { return m }

// RemoveScrubListEntriesResponseValidationError is the validation error
// returned by RemoveScrubListEntriesResponse.Validate if the designated
// constraints aren't met.
type RemoveScrubListEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveScrubListEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveScrubListEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveScrubListEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveScrubListEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveScrubListEntriesResponseValidationError) ErrorName() string {
	return "RemoveScrubListEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveScrubListEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveScrubListEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveScrubListEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveScrubListEntriesResponseValidationError{}

// Validate checks the field values on UpdateScrubListEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateScrubListEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateScrubListEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateScrubListEntryRequestMultiError, or nil if none found.
func (m *UpdateScrubListEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateScrubListEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScrubListId

	if all {
		switch v := interface{}(m.GetNotes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateScrubListEntryRequestValidationError{
					field:  "Notes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateScrubListEntryRequestValidationError{
					field:  "Notes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateScrubListEntryRequestValidationError{
				field:  "Notes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateScrubListEntryRequestValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateScrubListEntryRequestValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateScrubListEntryRequestValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCountryCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateScrubListEntryRequestValidationError{
					field:  "CountryCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateScrubListEntryRequestValidationError{
					field:  "CountryCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountryCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateScrubListEntryRequestValidationError{
				field:  "CountryCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateScrubListEntryRequestMultiError(errors)
	}

	return nil
}

// UpdateScrubListEntryRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateScrubListEntryRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateScrubListEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateScrubListEntryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateScrubListEntryRequestMultiError) AllErrors() []error { return m }

// UpdateScrubListEntryRequestValidationError is the validation error returned
// by UpdateScrubListEntryRequest.Validate if the designated constraints
// aren't met.
type UpdateScrubListEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScrubListEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScrubListEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScrubListEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScrubListEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScrubListEntryRequestValidationError) ErrorName() string {
	return "UpdateScrubListEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScrubListEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScrubListEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScrubListEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScrubListEntryRequestValidationError{}

// Validate checks the field values on UpdateScrubListEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateScrubListEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateScrubListEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateScrubListEntryResponseMultiError, or nil if none found.
func (m *UpdateScrubListEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateScrubListEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateScrubListEntryResponseMultiError(errors)
	}

	return nil
}

// UpdateScrubListEntryResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateScrubListEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateScrubListEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateScrubListEntryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateScrubListEntryResponseMultiError) AllErrors() []error { return m }

// UpdateScrubListEntryResponseValidationError is the validation error returned
// by UpdateScrubListEntryResponse.Validate if the designated constraints
// aren't met.
type UpdateScrubListEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScrubListEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScrubListEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScrubListEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScrubListEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScrubListEntryResponseValidationError) ErrorName() string {
	return "UpdateScrubListEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScrubListEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScrubListEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScrubListEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScrubListEntryResponseValidationError{}

// Validate checks the field values on AddScrubListEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddScrubListEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddScrubListEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddScrubListEntriesRequestMultiError, or nil if none found.
func (m *AddScrubListEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddScrubListEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScrubListId

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddScrubListEntriesRequestValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddScrubListEntriesRequestValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddScrubListEntriesRequestValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CountryCode

	if len(errors) > 0 {
		return AddScrubListEntriesRequestMultiError(errors)
	}

	return nil
}

// AddScrubListEntriesRequestMultiError is an error wrapping multiple
// validation errors returned by AddScrubListEntriesRequest.ValidateAll() if
// the designated constraints aren't met.
type AddScrubListEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddScrubListEntriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddScrubListEntriesRequestMultiError) AllErrors() []error { return m }

// AddScrubListEntriesRequestValidationError is the validation error returned
// by AddScrubListEntriesRequest.Validate if the designated constraints aren't met.
type AddScrubListEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddScrubListEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddScrubListEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddScrubListEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddScrubListEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddScrubListEntriesRequestValidationError) ErrorName() string {
	return "AddScrubListEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddScrubListEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddScrubListEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddScrubListEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddScrubListEntriesRequestValidationError{}

// Validate checks the field values on AddScrubListEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddScrubListEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddScrubListEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddScrubListEntriesResponseMultiError, or nil if none found.
func (m *AddScrubListEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddScrubListEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddScrubListEntriesResponseMultiError(errors)
	}

	return nil
}

// AddScrubListEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by AddScrubListEntriesResponse.ValidateAll() if
// the designated constraints aren't met.
type AddScrubListEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddScrubListEntriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddScrubListEntriesResponseMultiError) AllErrors() []error { return m }

// AddScrubListEntriesResponseValidationError is the validation error returned
// by AddScrubListEntriesResponse.Validate if the designated constraints
// aren't met.
type AddScrubListEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddScrubListEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddScrubListEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddScrubListEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddScrubListEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddScrubListEntriesResponseValidationError) ErrorName() string {
	return "AddScrubListEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddScrubListEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddScrubListEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddScrubListEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddScrubListEntriesResponseValidationError{}

// Validate checks the field values on ListScrubListsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListScrubListsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListScrubListsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListScrubListsRequestMultiError, or nil if none found.
func (m *ListScrubListsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListScrubListsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListScrubListsRequestMultiError(errors)
	}

	return nil
}

// ListScrubListsRequestMultiError is an error wrapping multiple validation
// errors returned by ListScrubListsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListScrubListsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListScrubListsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListScrubListsRequestMultiError) AllErrors() []error { return m }

// ListScrubListsRequestValidationError is the validation error returned by
// ListScrubListsRequest.Validate if the designated constraints aren't met.
type ListScrubListsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrubListsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrubListsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrubListsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrubListsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrubListsRequestValidationError) ErrorName() string {
	return "ListScrubListsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrubListsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrubListsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrubListsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrubListsRequestValidationError{}

// Validate checks the field values on ListScrubListsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListScrubListsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListScrubListsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListScrubListsResponseMultiError, or nil if none found.
func (m *ListScrubListsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListScrubListsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetScrubLists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListScrubListsResponseValidationError{
						field:  fmt.Sprintf("ScrubLists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListScrubListsResponseValidationError{
						field:  fmt.Sprintf("ScrubLists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListScrubListsResponseValidationError{
					field:  fmt.Sprintf("ScrubLists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListScrubListsResponseMultiError(errors)
	}

	return nil
}

// ListScrubListsResponseMultiError is an error wrapping multiple validation
// errors returned by ListScrubListsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListScrubListsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListScrubListsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListScrubListsResponseMultiError) AllErrors() []error { return m }

// ListScrubListsResponseValidationError is the validation error returned by
// ListScrubListsResponse.Validate if the designated constraints aren't met.
type ListScrubListsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrubListsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrubListsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrubListsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrubListsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrubListsResponseValidationError) ErrorName() string {
	return "ListScrubListsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrubListsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrubListsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrubListsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrubListsResponseValidationError{}

// Validate checks the field values on ScrubList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScrubList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScrubList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScrubListMultiError, or nil
// if none found.
func (m *ScrubList) ValidateAll() error {
	return m.validate(true)
}

func (m *ScrubList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScrubListId

	// no validation rules for ReadOnly

	// no validation rules for ContentType

	if len(errors) > 0 {
		return ScrubListMultiError(errors)
	}

	return nil
}

// ScrubListMultiError is an error wrapping multiple validation errors returned
// by ScrubList.ValidateAll() if the designated constraints aren't met.
type ScrubListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScrubListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScrubListMultiError) AllErrors() []error { return m }

// ScrubListValidationError is the validation error returned by
// ScrubList.Validate if the designated constraints aren't met.
type ScrubListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScrubListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScrubListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScrubListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScrubListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScrubListValidationError) ErrorName() string { return "ScrubListValidationError" }

// Error satisfies the builtin error interface
func (e ScrubListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScrubList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScrubListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScrubListValidationError{}

// Validate checks the field values on GetClientConfigurationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClientConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientConfigurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetClientConfigurationRequestMultiError, or nil if none found.
func (m *GetClientConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetClientConfigurationRequestMultiError(errors)
	}

	return nil
}

// GetClientConfigurationRequestMultiError is an error wrapping multiple
// validation errors returned by GetClientConfigurationRequest.ValidateAll()
// if the designated constraints aren't met.
type GetClientConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientConfigurationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientConfigurationRequestMultiError) AllErrors() []error { return m }

// GetClientConfigurationRequestValidationError is the validation error
// returned by GetClientConfigurationRequest.Validate if the designated
// constraints aren't met.
type GetClientConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientConfigurationRequestValidationError) ErrorName() string {
	return "GetClientConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientConfigurationRequestValidationError{}

// Validate checks the field values on GetClientConfigurationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClientConfigurationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientConfigurationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetClientConfigurationResponseMultiError, or nil if none found.
func (m *GetClientConfigurationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientConfigurationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for OrgName

	// no validation rules for ConfigName

	// no validation rules for ConfigPayload

	if len(errors) > 0 {
		return GetClientConfigurationResponseMultiError(errors)
	}

	return nil
}

// GetClientConfigurationResponseMultiError is an error wrapping multiple
// validation errors returned by GetClientConfigurationResponse.ValidateAll()
// if the designated constraints aren't met.
type GetClientConfigurationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientConfigurationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientConfigurationResponseMultiError) AllErrors() []error { return m }

// GetClientConfigurationResponseValidationError is the validation error
// returned by GetClientConfigurationResponse.Validate if the designated
// constraints aren't met.
type GetClientConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientConfigurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientConfigurationResponseValidationError) ErrorName() string {
	return "GetClientConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientConfigurationResponseValidationError{}

// Validate checks the field values on GetOrganizationInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationInfoRequestMultiError, or nil if none found.
func (m *GetOrganizationInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrganizationInfoRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationInfoRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationInfoRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationInfoRequestMultiError) AllErrors() []error { return m }

// GetOrganizationInfoRequestValidationError is the validation error returned
// by GetOrganizationInfoRequest.Validate if the designated constraints aren't met.
type GetOrganizationInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationInfoRequestValidationError) ErrorName() string {
	return "GetOrganizationInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationInfoRequestValidationError{}

// Validate checks the field values on GetOrganizationInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationInfoResponseMultiError, or nil if none found.
func (m *GetOrganizationInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for OrgName

	if len(errors) > 0 {
		return GetOrganizationInfoResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationInfoResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationInfoResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationInfoResponseMultiError) AllErrors() []error { return m }

// GetOrganizationInfoResponseValidationError is the validation error returned
// by GetOrganizationInfoResponse.Validate if the designated constraints
// aren't met.
type GetOrganizationInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationInfoResponseValidationError) ErrorName() string {
	return "GetOrganizationInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationInfoResponseValidationError{}

// Validate checks the field values on RotateCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RotateCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RotateCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RotateCertificateRequestMultiError, or nil if none found.
func (m *RotateCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RotateCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CertificateHash

	if len(errors) > 0 {
		return RotateCertificateRequestMultiError(errors)
	}

	return nil
}

// RotateCertificateRequestMultiError is an error wrapping multiple validation
// errors returned by RotateCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type RotateCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RotateCertificateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RotateCertificateRequestMultiError) AllErrors() []error { return m }

// RotateCertificateRequestValidationError is the validation error returned by
// RotateCertificateRequest.Validate if the designated constraints aren't met.
type RotateCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RotateCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RotateCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RotateCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RotateCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RotateCertificateRequestValidationError) ErrorName() string {
	return "RotateCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RotateCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRotateCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RotateCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RotateCertificateRequestValidationError{}

// Validate checks the field values on RotateCertificateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RotateCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RotateCertificateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RotateCertificateResponseMultiError, or nil if none found.
func (m *RotateCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RotateCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EncodedCertificate

	if len(errors) > 0 {
		return RotateCertificateResponseMultiError(errors)
	}

	return nil
}

// RotateCertificateResponseMultiError is an error wrapping multiple validation
// errors returned by RotateCertificateResponse.ValidateAll() if the
// designated constraints aren't met.
type RotateCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RotateCertificateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RotateCertificateResponseMultiError) AllErrors() []error { return m }

// RotateCertificateResponseValidationError is the validation error returned by
// RotateCertificateResponse.Validate if the designated constraints aren't met.
type RotateCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RotateCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RotateCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RotateCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RotateCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RotateCertificateResponseValidationError) ErrorName() string {
	return "RotateCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RotateCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRotateCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RotateCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RotateCertificateResponseValidationError{}

// Validate checks the field values on GetRecordingStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecordingStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecordingStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecordingStatusRequestMultiError, or nil if none found.
func (m *GetRecordingStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecordingStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return GetRecordingStatusRequestMultiError(errors)
	}

	return nil
}

// GetRecordingStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetRecordingStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type GetRecordingStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecordingStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecordingStatusRequestMultiError) AllErrors() []error { return m }

// GetRecordingStatusRequestValidationError is the validation error returned by
// GetRecordingStatusRequest.Validate if the designated constraints aren't met.
type GetRecordingStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecordingStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecordingStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecordingStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecordingStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecordingStatusRequestValidationError) ErrorName() string {
	return "GetRecordingStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecordingStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecordingStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecordingStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecordingStatusRequestValidationError{}

// Validate checks the field values on GetRecordingStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecordingStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecordingStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecordingStatusResponseMultiError, or nil if none found.
func (m *GetRecordingStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecordingStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsRecording

	if len(errors) > 0 {
		return GetRecordingStatusResponseMultiError(errors)
	}

	return nil
}

// GetRecordingStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetRecordingStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type GetRecordingStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecordingStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecordingStatusResponseMultiError) AllErrors() []error { return m }

// GetRecordingStatusResponseValidationError is the validation error returned
// by GetRecordingStatusResponse.Validate if the designated constraints aren't met.
type GetRecordingStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecordingStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecordingStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecordingStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecordingStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecordingStatusResponseValidationError) ErrorName() string {
	return "GetRecordingStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecordingStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecordingStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecordingStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecordingStatusResponseValidationError{}

// Validate checks the field values on UpsertAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertAgentRequestMultiError, or nil if none found.
func (m *UpsertAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for PartnerAgentId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Password

	if len(errors) > 0 {
		return UpsertAgentRequestMultiError(errors)
	}

	return nil
}

// UpsertAgentRequestMultiError is an error wrapping multiple validation errors
// returned by UpsertAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type UpsertAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertAgentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertAgentRequestMultiError) AllErrors() []error { return m }

// UpsertAgentRequestValidationError is the validation error returned by
// UpsertAgentRequest.Validate if the designated constraints aren't met.
type UpsertAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAgentRequestValidationError) ErrorName() string {
	return "UpsertAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAgentRequestValidationError{}

// Validate checks the field values on UpsertAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertAgentResponseMultiError, or nil if none found.
func (m *UpsertAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertAgentResponseValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertAgentResponseValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertAgentResponseValidationError{
				field:  "Agent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertAgentResponseMultiError(errors)
	}

	return nil
}

// UpsertAgentResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertAgentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertAgentResponseMultiError) AllErrors() []error { return m }

// UpsertAgentResponseValidationError is the validation error returned by
// UpsertAgentResponse.Validate if the designated constraints aren't met.
type UpsertAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAgentResponseValidationError) ErrorName() string {
	return "UpsertAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAgentResponseValidationError{}

// Validate checks the field values on GetAgentByPartnerIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentByPartnerIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentByPartnerIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentByPartnerIdRequestMultiError, or nil if none found.
func (m *GetAgentByPartnerIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentByPartnerIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return GetAgentByPartnerIdRequestMultiError(errors)
	}

	return nil
}

// GetAgentByPartnerIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetAgentByPartnerIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAgentByPartnerIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentByPartnerIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentByPartnerIdRequestMultiError) AllErrors() []error { return m }

// GetAgentByPartnerIdRequestValidationError is the validation error returned
// by GetAgentByPartnerIdRequest.Validate if the designated constraints aren't met.
type GetAgentByPartnerIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentByPartnerIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentByPartnerIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentByPartnerIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentByPartnerIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentByPartnerIdRequestValidationError) ErrorName() string {
	return "GetAgentByPartnerIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentByPartnerIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentByPartnerIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentByPartnerIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentByPartnerIdRequestValidationError{}

// Validate checks the field values on GetAgentByPartnerIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentByPartnerIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentByPartnerIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentByPartnerIdResponseMultiError, or nil if none found.
func (m *GetAgentByPartnerIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentByPartnerIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAgentByPartnerIdResponseValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAgentByPartnerIdResponseValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAgentByPartnerIdResponseValidationError{
				field:  "Agent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAgentByPartnerIdResponseMultiError(errors)
	}

	return nil
}

// GetAgentByPartnerIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetAgentByPartnerIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAgentByPartnerIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentByPartnerIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentByPartnerIdResponseMultiError) AllErrors() []error { return m }

// GetAgentByPartnerIdResponseValidationError is the validation error returned
// by GetAgentByPartnerIdResponse.Validate if the designated constraints
// aren't met.
type GetAgentByPartnerIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentByPartnerIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentByPartnerIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentByPartnerIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentByPartnerIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentByPartnerIdResponseValidationError) ErrorName() string {
	return "GetAgentByPartnerIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentByPartnerIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentByPartnerIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentByPartnerIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentByPartnerIdResponseValidationError{}

// Validate checks the field values on GetAgentByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentByIdRequestMultiError, or nil if none found.
func (m *GetAgentByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetAgentByIdRequestMultiError(errors)
	}

	return nil
}

// GetAgentByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetAgentByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAgentByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentByIdRequestMultiError) AllErrors() []error { return m }

// GetAgentByIdRequestValidationError is the validation error returned by
// GetAgentByIdRequest.Validate if the designated constraints aren't met.
type GetAgentByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentByIdRequestValidationError) ErrorName() string {
	return "GetAgentByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentByIdRequestValidationError{}

// Validate checks the field values on GetAgentByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentByIdResponseMultiError, or nil if none found.
func (m *GetAgentByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAgentByIdResponseValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAgentByIdResponseValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAgentByIdResponseValidationError{
				field:  "Agent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAgentByIdResponseMultiError(errors)
	}

	return nil
}

// GetAgentByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetAgentByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAgentByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentByIdResponseMultiError) AllErrors() []error { return m }

// GetAgentByIdResponseValidationError is the validation error returned by
// GetAgentByIdResponse.Validate if the designated constraints aren't met.
type GetAgentByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentByIdResponseValidationError) ErrorName() string {
	return "GetAgentByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentByIdResponseValidationError{}

// Validate checks the field values on StopCallRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopCallRecordingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopCallRecordingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopCallRecordingRequestMultiError, or nil if none found.
func (m *StopCallRecordingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopCallRecordingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return StopCallRecordingRequestMultiError(errors)
	}

	return nil
}

// StopCallRecordingRequestMultiError is an error wrapping multiple validation
// errors returned by StopCallRecordingRequest.ValidateAll() if the designated
// constraints aren't met.
type StopCallRecordingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopCallRecordingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopCallRecordingRequestMultiError) AllErrors() []error { return m }

// StopCallRecordingRequestValidationError is the validation error returned by
// StopCallRecordingRequest.Validate if the designated constraints aren't met.
type StopCallRecordingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopCallRecordingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopCallRecordingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopCallRecordingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopCallRecordingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopCallRecordingRequestValidationError) ErrorName() string {
	return "StopCallRecordingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopCallRecordingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopCallRecordingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopCallRecordingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopCallRecordingRequestValidationError{}

// Validate checks the field values on StopCallRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopCallRecordingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopCallRecordingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopCallRecordingResponseMultiError, or nil if none found.
func (m *StopCallRecordingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopCallRecordingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopCallRecordingResponseMultiError(errors)
	}

	return nil
}

// StopCallRecordingResponseMultiError is an error wrapping multiple validation
// errors returned by StopCallRecordingResponse.ValidateAll() if the
// designated constraints aren't met.
type StopCallRecordingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopCallRecordingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopCallRecordingResponseMultiError) AllErrors() []error { return m }

// StopCallRecordingResponseValidationError is the validation error returned by
// StopCallRecordingResponse.Validate if the designated constraints aren't met.
type StopCallRecordingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopCallRecordingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopCallRecordingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopCallRecordingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopCallRecordingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopCallRecordingResponseValidationError) ErrorName() string {
	return "StopCallRecordingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopCallRecordingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopCallRecordingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopCallRecordingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopCallRecordingResponseValidationError{}

// Validate checks the field values on StartCallRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartCallRecordingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartCallRecordingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartCallRecordingRequestMultiError, or nil if none found.
func (m *StartCallRecordingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartCallRecordingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return StartCallRecordingRequestMultiError(errors)
	}

	return nil
}

// StartCallRecordingRequestMultiError is an error wrapping multiple validation
// errors returned by StartCallRecordingRequest.ValidateAll() if the
// designated constraints aren't met.
type StartCallRecordingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartCallRecordingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartCallRecordingRequestMultiError) AllErrors() []error { return m }

// StartCallRecordingRequestValidationError is the validation error returned by
// StartCallRecordingRequest.Validate if the designated constraints aren't met.
type StartCallRecordingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartCallRecordingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartCallRecordingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartCallRecordingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartCallRecordingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartCallRecordingRequestValidationError) ErrorName() string {
	return "StartCallRecordingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartCallRecordingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartCallRecordingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartCallRecordingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartCallRecordingRequestValidationError{}

// Validate checks the field values on StartCallRecordingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartCallRecordingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartCallRecordingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartCallRecordingResponseMultiError, or nil if none found.
func (m *StartCallRecordingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartCallRecordingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartCallRecordingResponseMultiError(errors)
	}

	return nil
}

// StartCallRecordingResponseMultiError is an error wrapping multiple
// validation errors returned by StartCallRecordingResponse.ValidateAll() if
// the designated constraints aren't met.
type StartCallRecordingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartCallRecordingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartCallRecordingResponseMultiError) AllErrors() []error { return m }

// StartCallRecordingResponseValidationError is the validation error returned
// by StartCallRecordingResponse.Validate if the designated constraints aren't met.
type StartCallRecordingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartCallRecordingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartCallRecordingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartCallRecordingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartCallRecordingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartCallRecordingResponseValidationError) ErrorName() string {
	return "StartCallRecordingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartCallRecordingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartCallRecordingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartCallRecordingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartCallRecordingResponseValidationError{}

// Validate checks the field values on AddAgentCallResponseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAgentCallResponseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAgentCallResponseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAgentCallResponseRequestMultiError, or nil if none found.
func (m *AddAgentCallResponseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAgentCallResponseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	// no validation rules for CallSid

	// no validation rules for CallType

	// no validation rules for CurrentSessionId

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return AddAgentCallResponseRequestMultiError(errors)
	}

	return nil
}

// AddAgentCallResponseRequestMultiError is an error wrapping multiple
// validation errors returned by AddAgentCallResponseRequest.ValidateAll() if
// the designated constraints aren't met.
type AddAgentCallResponseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAgentCallResponseRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAgentCallResponseRequestMultiError) AllErrors() []error { return m }

// AddAgentCallResponseRequestValidationError is the validation error returned
// by AddAgentCallResponseRequest.Validate if the designated constraints
// aren't met.
type AddAgentCallResponseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAgentCallResponseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAgentCallResponseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAgentCallResponseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAgentCallResponseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAgentCallResponseRequestValidationError) ErrorName() string {
	return "AddAgentCallResponseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAgentCallResponseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAgentCallResponseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAgentCallResponseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAgentCallResponseRequestValidationError{}

// Validate checks the field values on AddAgentCallResponseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAgentCallResponseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAgentCallResponseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAgentCallResponseResponseMultiError, or nil if none found.
func (m *AddAgentCallResponseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAgentCallResponseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAgentCallResponseResponseMultiError(errors)
	}

	return nil
}

// AddAgentCallResponseResponseMultiError is an error wrapping multiple
// validation errors returned by AddAgentCallResponseResponse.ValidateAll() if
// the designated constraints aren't met.
type AddAgentCallResponseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAgentCallResponseResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAgentCallResponseResponseMultiError) AllErrors() []error { return m }

// AddAgentCallResponseResponseValidationError is the validation error returned
// by AddAgentCallResponseResponse.Validate if the designated constraints
// aren't met.
type AddAgentCallResponseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAgentCallResponseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAgentCallResponseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAgentCallResponseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAgentCallResponseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAgentCallResponseResponseValidationError) ErrorName() string {
	return "AddAgentCallResponseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAgentCallResponseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAgentCallResponseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAgentCallResponseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAgentCallResponseResponseValidationError{}

// Validate checks the field values on DialRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DialRequestMultiError, or
// nil if none found.
func (m *DialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	// no validation rules for PhoneNumber

	if all {
		switch v := interface{}(m.GetCallerId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DialRequestValidationError{
					field:  "CallerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DialRequestValidationError{
					field:  "CallerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallerId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DialRequestValidationError{
				field:  "CallerId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPoolId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DialRequestValidationError{
					field:  "PoolId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DialRequestValidationError{
					field:  "PoolId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoolId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DialRequestValidationError{
				field:  "PoolId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecordId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DialRequestValidationError{
					field:  "RecordId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DialRequestValidationError{
					field:  "RecordId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecordId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DialRequestValidationError{
				field:  "RecordId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRulesetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DialRequestValidationError{
					field:  "RulesetName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DialRequestValidationError{
					field:  "RulesetName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRulesetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DialRequestValidationError{
				field:  "RulesetName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SkipComplianceChecks

	if len(errors) > 0 {
		return DialRequestMultiError(errors)
	}

	return nil
}

// DialRequestMultiError is an error wrapping multiple validation errors
// returned by DialRequest.ValidateAll() if the designated constraints aren't met.
type DialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialRequestMultiError) AllErrors() []error { return m }

// DialRequestValidationError is the validation error returned by
// DialRequest.Validate if the designated constraints aren't met.
type DialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialRequestValidationError) ErrorName() string { return "DialRequestValidationError" }

// Error satisfies the builtin error interface
func (e DialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialRequestValidationError{}

// Validate checks the field values on DialResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DialResponseMultiError, or
// nil if none found.
func (m *DialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	// no validation rules for CallerId

	// no validation rules for CallSid

	// no validation rules for CallType

	// no validation rules for OrgId

	// no validation rules for PartnerAgentId

	// no validation rules for Attempted

	// no validation rules for Status

	// no validation rules for CallerSid

	if len(errors) > 0 {
		return DialResponseMultiError(errors)
	}

	return nil
}

// DialResponseMultiError is an error wrapping multiple validation errors
// returned by DialResponse.ValidateAll() if the designated constraints aren't met.
type DialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialResponseMultiError) AllErrors() []error { return m }

// DialResponseValidationError is the validation error returned by
// DialResponse.Validate if the designated constraints aren't met.
type DialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialResponseValidationError) ErrorName() string { return "DialResponseValidationError" }

// Error satisfies the builtin error interface
func (e DialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialResponseValidationError{}

// Validate checks the field values on TransferRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferRequestMultiError, or nil if none found.
func (m *TransferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	// no validation rules for Kind

	// no validation rules for Action

	switch v := m.Destination.(type) {
	case *TransferRequest_ReceivingPartnerAgentId:
		if v == nil {
			err := TransferRequestValidationError{
				field:  "Destination",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReceivingPartnerAgentId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransferRequestValidationError{
						field:  "ReceivingPartnerAgentId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransferRequestValidationError{
						field:  "ReceivingPartnerAgentId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReceivingPartnerAgentId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransferRequestValidationError{
					field:  "ReceivingPartnerAgentId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransferRequest_Outbound_:
		if v == nil {
			err := TransferRequestValidationError{
				field:  "Destination",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOutbound()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransferRequestValidationError{
						field:  "Outbound",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransferRequestValidationError{
						field:  "Outbound",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOutbound()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransferRequestValidationError{
					field:  "Outbound",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransferRequest_Queue_:
		if v == nil {
			err := TransferRequestValidationError{
				field:  "Destination",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQueue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransferRequestValidationError{
						field:  "Queue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransferRequestValidationError{
						field:  "Queue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransferRequestValidationError{
					field:  "Queue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TransferRequestMultiError(errors)
	}

	return nil
}

// TransferRequestMultiError is an error wrapping multiple validation errors
// returned by TransferRequest.ValidateAll() if the designated constraints
// aren't met.
type TransferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferRequestMultiError) AllErrors() []error { return m }

// TransferRequestValidationError is the validation error returned by
// TransferRequest.Validate if the designated constraints aren't met.
type TransferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferRequestValidationError) ErrorName() string { return "TransferRequestValidationError" }

// Error satisfies the builtin error interface
func (e TransferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferRequestValidationError{}

// Validate checks the field values on TransferResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferResponseMultiError, or nil if none found.
func (m *TransferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransferResponseMultiError(errors)
	}

	return nil
}

// TransferResponseMultiError is an error wrapping multiple validation errors
// returned by TransferResponse.ValidateAll() if the designated constraints
// aren't met.
type TransferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferResponseMultiError) AllErrors() []error { return m }

// TransferResponseValidationError is the validation error returned by
// TransferResponse.Validate if the designated constraints aren't met.
type TransferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferResponseValidationError) ErrorName() string { return "TransferResponseValidationError" }

// Error satisfies the builtin error interface
func (e TransferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferResponseValidationError{}

// Validate checks the field values on ListNCLRulesetNamesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNCLRulesetNamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNCLRulesetNamesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNCLRulesetNamesRequestMultiError, or nil if none found.
func (m *ListNCLRulesetNamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNCLRulesetNamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListNCLRulesetNamesRequestMultiError(errors)
	}

	return nil
}

// ListNCLRulesetNamesRequestMultiError is an error wrapping multiple
// validation errors returned by ListNCLRulesetNamesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListNCLRulesetNamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNCLRulesetNamesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNCLRulesetNamesRequestMultiError) AllErrors() []error { return m }

// ListNCLRulesetNamesRequestValidationError is the validation error returned
// by ListNCLRulesetNamesRequest.Validate if the designated constraints aren't met.
type ListNCLRulesetNamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNCLRulesetNamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNCLRulesetNamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNCLRulesetNamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNCLRulesetNamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNCLRulesetNamesRequestValidationError) ErrorName() string {
	return "ListNCLRulesetNamesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNCLRulesetNamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNCLRulesetNamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNCLRulesetNamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNCLRulesetNamesRequestValidationError{}

// Validate checks the field values on ListNCLRulesetNamesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNCLRulesetNamesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNCLRulesetNamesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNCLRulesetNamesResponseMultiError, or nil if none found.
func (m *ListNCLRulesetNamesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNCLRulesetNamesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListNCLRulesetNamesResponseMultiError(errors)
	}

	return nil
}

// ListNCLRulesetNamesResponseMultiError is an error wrapping multiple
// validation errors returned by ListNCLRulesetNamesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListNCLRulesetNamesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNCLRulesetNamesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNCLRulesetNamesResponseMultiError) AllErrors() []error { return m }

// ListNCLRulesetNamesResponseValidationError is the validation error returned
// by ListNCLRulesetNamesResponse.Validate if the designated constraints
// aren't met.
type ListNCLRulesetNamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNCLRulesetNamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNCLRulesetNamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNCLRulesetNamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNCLRulesetNamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNCLRulesetNamesResponseValidationError) ErrorName() string {
	return "ListNCLRulesetNamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNCLRulesetNamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNCLRulesetNamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNCLRulesetNamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNCLRulesetNamesResponseValidationError{}

// Validate checks the field values on GetAgentStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentStatusRequestMultiError, or nil if none found.
func (m *GetAgentStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return GetAgentStatusRequestMultiError(errors)
	}

	return nil
}

// GetAgentStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetAgentStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAgentStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentStatusRequestMultiError) AllErrors() []error { return m }

// GetAgentStatusRequestValidationError is the validation error returned by
// GetAgentStatusRequest.Validate if the designated constraints aren't met.
type GetAgentStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentStatusRequestValidationError) ErrorName() string {
	return "GetAgentStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentStatusRequestValidationError{}

// Validate checks the field values on GetAgentStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAgentStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentStatusResponseMultiError, or nil if none found.
func (m *GetAgentStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	// no validation rules for AgentState

	// no validation rules for CurrentSessionId

	if all {
		switch v := interface{}(m.GetConnectedParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAgentStatusResponseValidationError{
					field:  "ConnectedParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAgentStatusResponseValidationError{
					field:  "ConnectedParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnectedParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAgentStatusResponseValidationError{
				field:  "ConnectedParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAgentStatusResponseMultiError(errors)
	}

	return nil
}

// GetAgentStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetAgentStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAgentStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentStatusResponseMultiError) AllErrors() []error { return m }

// GetAgentStatusResponseValidationError is the validation error returned by
// GetAgentStatusResponse.Validate if the designated constraints aren't met.
type GetAgentStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentStatusResponseValidationError) ErrorName() string {
	return "GetAgentStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAgentStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentStatusResponseValidationError{}

// Validate checks the field values on ConnectedParty with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConnectedParty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectedParty with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectedPartyMultiError,
// or nil if none found.
func (m *ConnectedParty) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectedParty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallSid

	// no validation rules for CallType

	// no validation rules for IsInbound

	if len(errors) > 0 {
		return ConnectedPartyMultiError(errors)
	}

	return nil
}

// ConnectedPartyMultiError is an error wrapping multiple validation errors
// returned by ConnectedParty.ValidateAll() if the designated constraints
// aren't met.
type ConnectedPartyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectedPartyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectedPartyMultiError) AllErrors() []error { return m }

// ConnectedPartyValidationError is the validation error returned by
// ConnectedParty.Validate if the designated constraints aren't met.
type ConnectedPartyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectedPartyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectedPartyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectedPartyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectedPartyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectedPartyValidationError) ErrorName() string { return "ConnectedPartyValidationError" }

// Error satisfies the builtin error interface
func (e ConnectedPartyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectedParty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectedPartyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectedPartyValidationError{}

// Validate checks the field values on UpdateAgentStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAgentStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAgentStatusRequestMultiError, or nil if none found.
func (m *UpdateAgentStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	// no validation rules for NewState

	// no validation rules for Reason

	if len(errors) > 0 {
		return UpdateAgentStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateAgentStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAgentStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAgentStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentStatusRequestMultiError) AllErrors() []error { return m }

// UpdateAgentStatusRequestValidationError is the validation error returned by
// UpdateAgentStatusRequest.Validate if the designated constraints aren't met.
type UpdateAgentStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentStatusRequestValidationError) ErrorName() string {
	return "UpdateAgentStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAgentStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentStatusRequestValidationError{}

// Validate checks the field values on UpdateAgentStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAgentStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAgentStatusResponseMultiError, or nil if none found.
func (m *UpdateAgentStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAgentStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateAgentStatusResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAgentStatusResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateAgentStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentStatusResponseMultiError) AllErrors() []error { return m }

// UpdateAgentStatusResponseValidationError is the validation error returned by
// UpdateAgentStatusResponse.Validate if the designated constraints aren't met.
type UpdateAgentStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentStatusResponseValidationError) ErrorName() string {
	return "UpdateAgentStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAgentStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentStatusResponseValidationError{}

// Validate checks the field values on ListAgentsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAgentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentsRequestMultiError, or nil if none found.
func (m *ListAgentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAgentsRequestMultiError(errors)
	}

	return nil
}

// ListAgentsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAgentsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAgentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentsRequestMultiError) AllErrors() []error { return m }

// ListAgentsRequestValidationError is the validation error returned by
// ListAgentsRequest.Validate if the designated constraints aren't met.
type ListAgentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentsRequestValidationError) ErrorName() string {
	return "ListAgentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentsRequestValidationError{}

// Validate checks the field values on ListAgentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAgentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentsResponseMultiError, or nil if none found.
func (m *ListAgentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAgentsResponseValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAgentsResponseValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAgentsResponseValidationError{
				field:  "Agent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAgentsResponseMultiError(errors)
	}

	return nil
}

// ListAgentsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAgentsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAgentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentsResponseMultiError) AllErrors() []error { return m }

// ListAgentsResponseValidationError is the validation error returned by
// ListAgentsResponse.Validate if the designated constraints aren't met.
type ListAgentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentsResponseValidationError) ErrorName() string {
	return "ListAgentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentsResponseValidationError{}

// Validate checks the field values on ListHuntGroupPauseCodesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHuntGroupPauseCodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHuntGroupPauseCodesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListHuntGroupPauseCodesRequestMultiError, or nil if none found.
func (m *ListHuntGroupPauseCodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHuntGroupPauseCodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return ListHuntGroupPauseCodesRequestMultiError(errors)
	}

	return nil
}

// ListHuntGroupPauseCodesRequestMultiError is an error wrapping multiple
// validation errors returned by ListHuntGroupPauseCodesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListHuntGroupPauseCodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHuntGroupPauseCodesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHuntGroupPauseCodesRequestMultiError) AllErrors() []error { return m }

// ListHuntGroupPauseCodesRequestValidationError is the validation error
// returned by ListHuntGroupPauseCodesRequest.Validate if the designated
// constraints aren't met.
type ListHuntGroupPauseCodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHuntGroupPauseCodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHuntGroupPauseCodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHuntGroupPauseCodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHuntGroupPauseCodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHuntGroupPauseCodesRequestValidationError) ErrorName() string {
	return "ListHuntGroupPauseCodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHuntGroupPauseCodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHuntGroupPauseCodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHuntGroupPauseCodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHuntGroupPauseCodesRequestValidationError{}

// Validate checks the field values on ListHuntGroupPauseCodesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHuntGroupPauseCodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHuntGroupPauseCodesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListHuntGroupPauseCodesResponseMultiError, or nil if none found.
func (m *ListHuntGroupPauseCodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHuntGroupPauseCodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return ListHuntGroupPauseCodesResponseMultiError(errors)
	}

	return nil
}

// ListHuntGroupPauseCodesResponseMultiError is an error wrapping multiple
// validation errors returned by ListHuntGroupPauseCodesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListHuntGroupPauseCodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHuntGroupPauseCodesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHuntGroupPauseCodesResponseMultiError) AllErrors() []error { return m }

// ListHuntGroupPauseCodesResponseValidationError is the validation error
// returned by ListHuntGroupPauseCodesResponse.Validate if the designated
// constraints aren't met.
type ListHuntGroupPauseCodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHuntGroupPauseCodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHuntGroupPauseCodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHuntGroupPauseCodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHuntGroupPauseCodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHuntGroupPauseCodesResponseValidationError) ErrorName() string {
	return "ListHuntGroupPauseCodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHuntGroupPauseCodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHuntGroupPauseCodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHuntGroupPauseCodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHuntGroupPauseCodesResponseValidationError{}

// Validate checks the field values on PutCallOnSimpleHoldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutCallOnSimpleHoldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutCallOnSimpleHoldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutCallOnSimpleHoldRequestMultiError, or nil if none found.
func (m *PutCallOnSimpleHoldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutCallOnSimpleHoldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return PutCallOnSimpleHoldRequestMultiError(errors)
	}

	return nil
}

// PutCallOnSimpleHoldRequestMultiError is an error wrapping multiple
// validation errors returned by PutCallOnSimpleHoldRequest.ValidateAll() if
// the designated constraints aren't met.
type PutCallOnSimpleHoldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutCallOnSimpleHoldRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutCallOnSimpleHoldRequestMultiError) AllErrors() []error { return m }

// PutCallOnSimpleHoldRequestValidationError is the validation error returned
// by PutCallOnSimpleHoldRequest.Validate if the designated constraints aren't met.
type PutCallOnSimpleHoldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutCallOnSimpleHoldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutCallOnSimpleHoldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutCallOnSimpleHoldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutCallOnSimpleHoldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutCallOnSimpleHoldRequestValidationError) ErrorName() string {
	return "PutCallOnSimpleHoldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutCallOnSimpleHoldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutCallOnSimpleHoldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutCallOnSimpleHoldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutCallOnSimpleHoldRequestValidationError{}

// Validate checks the field values on PutCallOnSimpleHoldResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutCallOnSimpleHoldResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutCallOnSimpleHoldResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutCallOnSimpleHoldResponseMultiError, or nil if none found.
func (m *PutCallOnSimpleHoldResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutCallOnSimpleHoldResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutCallOnSimpleHoldResponseMultiError(errors)
	}

	return nil
}

// PutCallOnSimpleHoldResponseMultiError is an error wrapping multiple
// validation errors returned by PutCallOnSimpleHoldResponse.ValidateAll() if
// the designated constraints aren't met.
type PutCallOnSimpleHoldResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutCallOnSimpleHoldResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutCallOnSimpleHoldResponseMultiError) AllErrors() []error { return m }

// PutCallOnSimpleHoldResponseValidationError is the validation error returned
// by PutCallOnSimpleHoldResponse.Validate if the designated constraints
// aren't met.
type PutCallOnSimpleHoldResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutCallOnSimpleHoldResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutCallOnSimpleHoldResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutCallOnSimpleHoldResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutCallOnSimpleHoldResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutCallOnSimpleHoldResponseValidationError) ErrorName() string {
	return "PutCallOnSimpleHoldResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutCallOnSimpleHoldResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutCallOnSimpleHoldResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutCallOnSimpleHoldResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutCallOnSimpleHoldResponseValidationError{}

// Validate checks the field values on TakeCallOffSimpleHoldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TakeCallOffSimpleHoldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TakeCallOffSimpleHoldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TakeCallOffSimpleHoldRequestMultiError, or nil if none found.
func (m *TakeCallOffSimpleHoldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TakeCallOffSimpleHoldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return TakeCallOffSimpleHoldRequestMultiError(errors)
	}

	return nil
}

// TakeCallOffSimpleHoldRequestMultiError is an error wrapping multiple
// validation errors returned by TakeCallOffSimpleHoldRequest.ValidateAll() if
// the designated constraints aren't met.
type TakeCallOffSimpleHoldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TakeCallOffSimpleHoldRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TakeCallOffSimpleHoldRequestMultiError) AllErrors() []error { return m }

// TakeCallOffSimpleHoldRequestValidationError is the validation error returned
// by TakeCallOffSimpleHoldRequest.Validate if the designated constraints
// aren't met.
type TakeCallOffSimpleHoldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TakeCallOffSimpleHoldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TakeCallOffSimpleHoldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TakeCallOffSimpleHoldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TakeCallOffSimpleHoldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TakeCallOffSimpleHoldRequestValidationError) ErrorName() string {
	return "TakeCallOffSimpleHoldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TakeCallOffSimpleHoldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTakeCallOffSimpleHoldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TakeCallOffSimpleHoldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TakeCallOffSimpleHoldRequestValidationError{}

// Validate checks the field values on TakeCallOffSimpleHoldResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TakeCallOffSimpleHoldResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TakeCallOffSimpleHoldResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TakeCallOffSimpleHoldResponseMultiError, or nil if none found.
func (m *TakeCallOffSimpleHoldResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TakeCallOffSimpleHoldResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TakeCallOffSimpleHoldResponseMultiError(errors)
	}

	return nil
}

// TakeCallOffSimpleHoldResponseMultiError is an error wrapping multiple
// validation errors returned by TakeCallOffSimpleHoldResponse.ValidateAll()
// if the designated constraints aren't met.
type TakeCallOffSimpleHoldResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TakeCallOffSimpleHoldResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TakeCallOffSimpleHoldResponseMultiError) AllErrors() []error { return m }

// TakeCallOffSimpleHoldResponseValidationError is the validation error
// returned by TakeCallOffSimpleHoldResponse.Validate if the designated
// constraints aren't met.
type TakeCallOffSimpleHoldResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TakeCallOffSimpleHoldResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TakeCallOffSimpleHoldResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TakeCallOffSimpleHoldResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TakeCallOffSimpleHoldResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TakeCallOffSimpleHoldResponseValidationError) ErrorName() string {
	return "TakeCallOffSimpleHoldResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TakeCallOffSimpleHoldResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTakeCallOffSimpleHoldResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TakeCallOffSimpleHoldResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TakeCallOffSimpleHoldResponseValidationError{}

// Validate checks the field values on Agent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Agent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Agent with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AgentMultiError, or nil if none found.
func (m *Agent) ValidateAll() error {
	return m.validate(true)
}

func (m *Agent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrgId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Username

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return AgentMultiError(errors)
	}

	return nil
}

// AgentMultiError is an error wrapping multiple validation errors returned by
// Agent.ValidateAll() if the designated constraints aren't met.
type AgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentMultiError) AllErrors() []error { return m }

// AgentValidationError is the validation error returned by Agent.Validate if
// the designated constraints aren't met.
type AgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentValidationError) ErrorName() string { return "AgentValidationError" }

// Error satisfies the builtin error interface
func (e AgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentValidationError{}

// Validate checks the field values on ListSkillsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSkillsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSkillsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSkillsRequestMultiError, or nil if none found.
func (m *ListSkillsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSkillsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSkillsRequestMultiError(errors)
	}

	return nil
}

// ListSkillsRequestMultiError is an error wrapping multiple validation errors
// returned by ListSkillsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSkillsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSkillsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSkillsRequestMultiError) AllErrors() []error { return m }

// ListSkillsRequestValidationError is the validation error returned by
// ListSkillsRequest.Validate if the designated constraints aren't met.
type ListSkillsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSkillsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSkillsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSkillsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSkillsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSkillsRequestValidationError) ErrorName() string {
	return "ListSkillsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSkillsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSkillsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSkillsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSkillsRequestValidationError{}

// Validate checks the field values on ListSkillsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSkillsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSkillsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSkillsResponseMultiError, or nil if none found.
func (m *ListSkillsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSkillsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSkills() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSkillsResponseValidationError{
						field:  fmt.Sprintf("Skills[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSkillsResponseValidationError{
						field:  fmt.Sprintf("Skills[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSkillsResponseValidationError{
					field:  fmt.Sprintf("Skills[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSkillsResponseMultiError(errors)
	}

	return nil
}

// ListSkillsResponseMultiError is an error wrapping multiple validation errors
// returned by ListSkillsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListSkillsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSkillsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSkillsResponseMultiError) AllErrors() []error { return m }

// ListSkillsResponseValidationError is the validation error returned by
// ListSkillsResponse.Validate if the designated constraints aren't met.
type ListSkillsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSkillsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSkillsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSkillsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSkillsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSkillsResponseValidationError) ErrorName() string {
	return "ListSkillsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSkillsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSkillsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSkillsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSkillsResponseValidationError{}

// Validate checks the field values on ListAgentSkillsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAgentSkillsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentSkillsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentSkillsRequestMultiError, or nil if none found.
func (m *ListAgentSkillsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentSkillsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return ListAgentSkillsRequestMultiError(errors)
	}

	return nil
}

// ListAgentSkillsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAgentSkillsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAgentSkillsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentSkillsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentSkillsRequestMultiError) AllErrors() []error { return m }

// ListAgentSkillsRequestValidationError is the validation error returned by
// ListAgentSkillsRequest.Validate if the designated constraints aren't met.
type ListAgentSkillsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentSkillsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentSkillsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentSkillsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentSkillsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentSkillsRequestValidationError) ErrorName() string {
	return "ListAgentSkillsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentSkillsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentSkillsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentSkillsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentSkillsRequestValidationError{}

// Validate checks the field values on ListAgentSkillsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAgentSkillsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentSkillsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentSkillsResponseMultiError, or nil if none found.
func (m *ListAgentSkillsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentSkillsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSkills() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentSkillsResponseValidationError{
						field:  fmt.Sprintf("Skills[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentSkillsResponseValidationError{
						field:  fmt.Sprintf("Skills[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentSkillsResponseValidationError{
					field:  fmt.Sprintf("Skills[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAgentSkillsResponseMultiError(errors)
	}

	return nil
}

// ListAgentSkillsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAgentSkillsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAgentSkillsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentSkillsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentSkillsResponseMultiError) AllErrors() []error { return m }

// ListAgentSkillsResponseValidationError is the validation error returned by
// ListAgentSkillsResponse.Validate if the designated constraints aren't met.
type ListAgentSkillsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentSkillsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentSkillsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentSkillsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentSkillsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentSkillsResponseValidationError) ErrorName() string {
	return "ListAgentSkillsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentSkillsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentSkillsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentSkillsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentSkillsResponseValidationError{}

// Validate checks the field values on AssignAgentSkillRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignAgentSkillRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignAgentSkillRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignAgentSkillRequestMultiError, or nil if none found.
func (m *AssignAgentSkillRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignAgentSkillRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	// no validation rules for SkillId

	// no validation rules for Proficiency

	if len(errors) > 0 {
		return AssignAgentSkillRequestMultiError(errors)
	}

	return nil
}

// AssignAgentSkillRequestMultiError is an error wrapping multiple validation
// errors returned by AssignAgentSkillRequest.ValidateAll() if the designated
// constraints aren't met.
type AssignAgentSkillRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignAgentSkillRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignAgentSkillRequestMultiError) AllErrors() []error { return m }

// AssignAgentSkillRequestValidationError is the validation error returned by
// AssignAgentSkillRequest.Validate if the designated constraints aren't met.
type AssignAgentSkillRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignAgentSkillRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignAgentSkillRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignAgentSkillRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignAgentSkillRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignAgentSkillRequestValidationError) ErrorName() string {
	return "AssignAgentSkillRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignAgentSkillRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignAgentSkillRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignAgentSkillRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignAgentSkillRequestValidationError{}

// Validate checks the field values on AssignAgentSkillResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignAgentSkillResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignAgentSkillResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignAgentSkillResponseMultiError, or nil if none found.
func (m *AssignAgentSkillResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignAgentSkillResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AssignAgentSkillResponseMultiError(errors)
	}

	return nil
}

// AssignAgentSkillResponseMultiError is an error wrapping multiple validation
// errors returned by AssignAgentSkillResponse.ValidateAll() if the designated
// constraints aren't met.
type AssignAgentSkillResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignAgentSkillResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignAgentSkillResponseMultiError) AllErrors() []error { return m }

// AssignAgentSkillResponseValidationError is the validation error returned by
// AssignAgentSkillResponse.Validate if the designated constraints aren't met.
type AssignAgentSkillResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignAgentSkillResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignAgentSkillResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignAgentSkillResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignAgentSkillResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignAgentSkillResponseValidationError) ErrorName() string {
	return "AssignAgentSkillResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignAgentSkillResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignAgentSkillResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignAgentSkillResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignAgentSkillResponseValidationError{}

// Validate checks the field values on UnassignAgentSkillRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnassignAgentSkillRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnassignAgentSkillRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnassignAgentSkillRequestMultiError, or nil if none found.
func (m *UnassignAgentSkillRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnassignAgentSkillRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	// no validation rules for SkillId

	if len(errors) > 0 {
		return UnassignAgentSkillRequestMultiError(errors)
	}

	return nil
}

// UnassignAgentSkillRequestMultiError is an error wrapping multiple validation
// errors returned by UnassignAgentSkillRequest.ValidateAll() if the
// designated constraints aren't met.
type UnassignAgentSkillRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnassignAgentSkillRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnassignAgentSkillRequestMultiError) AllErrors() []error { return m }

// UnassignAgentSkillRequestValidationError is the validation error returned by
// UnassignAgentSkillRequest.Validate if the designated constraints aren't met.
type UnassignAgentSkillRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnassignAgentSkillRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnassignAgentSkillRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnassignAgentSkillRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnassignAgentSkillRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnassignAgentSkillRequestValidationError) ErrorName() string {
	return "UnassignAgentSkillRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnassignAgentSkillRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnassignAgentSkillRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnassignAgentSkillRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnassignAgentSkillRequestValidationError{}

// Validate checks the field values on UnassignAgentSkillResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnassignAgentSkillResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnassignAgentSkillResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnassignAgentSkillResponseMultiError, or nil if none found.
func (m *UnassignAgentSkillResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnassignAgentSkillResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnassignAgentSkillResponseMultiError(errors)
	}

	return nil
}

// UnassignAgentSkillResponseMultiError is an error wrapping multiple
// validation errors returned by UnassignAgentSkillResponse.ValidateAll() if
// the designated constraints aren't met.
type UnassignAgentSkillResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnassignAgentSkillResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnassignAgentSkillResponseMultiError) AllErrors() []error { return m }

// UnassignAgentSkillResponseValidationError is the validation error returned
// by UnassignAgentSkillResponse.Validate if the designated constraints aren't met.
type UnassignAgentSkillResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnassignAgentSkillResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnassignAgentSkillResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnassignAgentSkillResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnassignAgentSkillResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnassignAgentSkillResponseValidationError) ErrorName() string {
	return "UnassignAgentSkillResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnassignAgentSkillResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnassignAgentSkillResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnassignAgentSkillResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnassignAgentSkillResponseValidationError{}

// Validate checks the field values on SearchVoiceRecordingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchVoiceRecordingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchVoiceRecordingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchVoiceRecordingsRequestMultiError, or nil if none found.
func (m *SearchVoiceRecordingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchVoiceRecordingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSearchOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchVoiceRecordingsRequestValidationError{
						field:  fmt.Sprintf("SearchOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchVoiceRecordingsRequestValidationError{
						field:  fmt.Sprintf("SearchOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchVoiceRecordingsRequestValidationError{
					field:  fmt.Sprintf("SearchOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchVoiceRecordingsRequestMultiError(errors)
	}

	return nil
}

// SearchVoiceRecordingsRequestMultiError is an error wrapping multiple
// validation errors returned by SearchVoiceRecordingsRequest.ValidateAll() if
// the designated constraints aren't met.
type SearchVoiceRecordingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchVoiceRecordingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchVoiceRecordingsRequestMultiError) AllErrors() []error { return m }

// SearchVoiceRecordingsRequestValidationError is the validation error returned
// by SearchVoiceRecordingsRequest.Validate if the designated constraints
// aren't met.
type SearchVoiceRecordingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchVoiceRecordingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchVoiceRecordingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchVoiceRecordingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchVoiceRecordingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchVoiceRecordingsRequestValidationError) ErrorName() string {
	return "SearchVoiceRecordingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchVoiceRecordingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchVoiceRecordingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchVoiceRecordingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchVoiceRecordingsRequestValidationError{}

// Validate checks the field values on SearchVoiceRecordingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchVoiceRecordingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchVoiceRecordingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchVoiceRecordingsResponseMultiError, or nil if none found.
func (m *SearchVoiceRecordingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchVoiceRecordingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecordings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchVoiceRecordingsResponseValidationError{
						field:  fmt.Sprintf("Recordings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchVoiceRecordingsResponseValidationError{
						field:  fmt.Sprintf("Recordings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchVoiceRecordingsResponseValidationError{
					field:  fmt.Sprintf("Recordings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchVoiceRecordingsResponseMultiError(errors)
	}

	return nil
}

// SearchVoiceRecordingsResponseMultiError is an error wrapping multiple
// validation errors returned by SearchVoiceRecordingsResponse.ValidateAll()
// if the designated constraints aren't met.
type SearchVoiceRecordingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchVoiceRecordingsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchVoiceRecordingsResponseMultiError) AllErrors() []error { return m }

// SearchVoiceRecordingsResponseValidationError is the validation error
// returned by SearchVoiceRecordingsResponse.Validate if the designated
// constraints aren't met.
type SearchVoiceRecordingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchVoiceRecordingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchVoiceRecordingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchVoiceRecordingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchVoiceRecordingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchVoiceRecordingsResponseValidationError) ErrorName() string {
	return "SearchVoiceRecordingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchVoiceRecordingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchVoiceRecordingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchVoiceRecordingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchVoiceRecordingsResponseValidationError{}

// Validate checks the field values on Recording with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Recording) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Recording with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecordingMultiError, or nil
// if none found.
func (m *Recording) ValidateAll() error {
	return m.validate(true)
}

func (m *Recording) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CallSid

	// no validation rules for CallType

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordingValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordingValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordingValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AgentPhone

	// no validation rules for ClientPhone

	// no validation rules for Campaign

	// no validation rules for RecordingType

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordingValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordingValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordingValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordingMultiError(errors)
	}

	return nil
}

// RecordingMultiError is an error wrapping multiple validation errors returned
// by Recording.ValidateAll() if the designated constraints aren't met.
type RecordingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordingMultiError) AllErrors() []error { return m }

// RecordingValidationError is the validation error returned by
// Recording.Validate if the designated constraints aren't met.
type RecordingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordingValidationError) ErrorName() string { return "RecordingValidationError" }

// Error satisfies the builtin error interface
func (e RecordingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecording.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordingValidationError{}

// Validate checks the field values on GetVoiceRecordingDownloadLinkRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetVoiceRecordingDownloadLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVoiceRecordingDownloadLinkRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetVoiceRecordingDownloadLinkRequestMultiError, or nil if none found.
func (m *GetVoiceRecordingDownloadLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVoiceRecordingDownloadLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordingId

	if len(errors) > 0 {
		return GetVoiceRecordingDownloadLinkRequestMultiError(errors)
	}

	return nil
}

// GetVoiceRecordingDownloadLinkRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetVoiceRecordingDownloadLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVoiceRecordingDownloadLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVoiceRecordingDownloadLinkRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVoiceRecordingDownloadLinkRequestMultiError) AllErrors() []error { return m }

// GetVoiceRecordingDownloadLinkRequestValidationError is the validation error
// returned by GetVoiceRecordingDownloadLinkRequest.Validate if the designated
// constraints aren't met.
type GetVoiceRecordingDownloadLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVoiceRecordingDownloadLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVoiceRecordingDownloadLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVoiceRecordingDownloadLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVoiceRecordingDownloadLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVoiceRecordingDownloadLinkRequestValidationError) ErrorName() string {
	return "GetVoiceRecordingDownloadLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVoiceRecordingDownloadLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVoiceRecordingDownloadLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVoiceRecordingDownloadLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVoiceRecordingDownloadLinkRequestValidationError{}

// Validate checks the field values on GetVoiceRecordingDownloadLinkResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetVoiceRecordingDownloadLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVoiceRecordingDownloadLinkResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetVoiceRecordingDownloadLinkResponseMultiError, or nil if none found.
func (m *GetVoiceRecordingDownloadLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVoiceRecordingDownloadLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownloadLink

	if len(errors) > 0 {
		return GetVoiceRecordingDownloadLinkResponseMultiError(errors)
	}

	return nil
}

// GetVoiceRecordingDownloadLinkResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetVoiceRecordingDownloadLinkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVoiceRecordingDownloadLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVoiceRecordingDownloadLinkResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVoiceRecordingDownloadLinkResponseMultiError) AllErrors() []error { return m }

// GetVoiceRecordingDownloadLinkResponseValidationError is the validation error
// returned by GetVoiceRecordingDownloadLinkResponse.Validate if the
// designated constraints aren't met.
type GetVoiceRecordingDownloadLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVoiceRecordingDownloadLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVoiceRecordingDownloadLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVoiceRecordingDownloadLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVoiceRecordingDownloadLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVoiceRecordingDownloadLinkResponseValidationError) ErrorName() string {
	return "GetVoiceRecordingDownloadLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVoiceRecordingDownloadLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVoiceRecordingDownloadLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVoiceRecordingDownloadLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVoiceRecordingDownloadLinkResponseValidationError{}

// Validate checks the field values on SearchOption with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchOption with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchOptionMultiError, or
// nil if none found.
func (m *SearchOption) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Operator

	// no validation rules for Value

	if len(errors) > 0 {
		return SearchOptionMultiError(errors)
	}

	return nil
}

// SearchOptionMultiError is an error wrapping multiple validation errors
// returned by SearchOption.ValidateAll() if the designated constraints aren't met.
type SearchOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOptionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOptionMultiError) AllErrors() []error { return m }

// SearchOptionValidationError is the validation error returned by
// SearchOption.Validate if the designated constraints aren't met.
type SearchOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOptionValidationError) ErrorName() string { return "SearchOptionValidationError" }

// Error satisfies the builtin error interface
func (e SearchOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOptionValidationError{}

// Validate checks the field values on ListSearchableRecordingFieldsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListSearchableRecordingFieldsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSearchableRecordingFieldsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSearchableRecordingFieldsRequestMultiError, or nil if none found.
func (m *ListSearchableRecordingFieldsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSearchableRecordingFieldsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSearchableRecordingFieldsRequestMultiError(errors)
	}

	return nil
}

// ListSearchableRecordingFieldsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListSearchableRecordingFieldsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSearchableRecordingFieldsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSearchableRecordingFieldsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSearchableRecordingFieldsRequestMultiError) AllErrors() []error { return m }

// ListSearchableRecordingFieldsRequestValidationError is the validation error
// returned by ListSearchableRecordingFieldsRequest.Validate if the designated
// constraints aren't met.
type ListSearchableRecordingFieldsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSearchableRecordingFieldsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSearchableRecordingFieldsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSearchableRecordingFieldsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSearchableRecordingFieldsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSearchableRecordingFieldsRequestValidationError) ErrorName() string {
	return "ListSearchableRecordingFieldsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSearchableRecordingFieldsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSearchableRecordingFieldsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSearchableRecordingFieldsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSearchableRecordingFieldsRequestValidationError{}

// Validate checks the field values on ListSearchableRecordingFieldsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListSearchableRecordingFieldsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSearchableRecordingFieldsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSearchableRecordingFieldsResponseMultiError, or nil if none found.
func (m *ListSearchableRecordingFieldsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSearchableRecordingFieldsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSearchableRecordingFieldsResponseMultiError(errors)
	}

	return nil
}

// ListSearchableRecordingFieldsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListSearchableRecordingFieldsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSearchableRecordingFieldsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSearchableRecordingFieldsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSearchableRecordingFieldsResponseMultiError) AllErrors() []error { return m }

// ListSearchableRecordingFieldsResponseValidationError is the validation error
// returned by ListSearchableRecordingFieldsResponse.Validate if the
// designated constraints aren't met.
type ListSearchableRecordingFieldsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSearchableRecordingFieldsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSearchableRecordingFieldsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSearchableRecordingFieldsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSearchableRecordingFieldsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSearchableRecordingFieldsResponseValidationError) ErrorName() string {
	return "ListSearchableRecordingFieldsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSearchableRecordingFieldsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSearchableRecordingFieldsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSearchableRecordingFieldsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSearchableRecordingFieldsResponseValidationError{}

// Validate checks the field values on StreamJobsResponse_ListPoolsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StreamJobsResponse_ListPoolsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamJobsResponse_ListPoolsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamJobsResponse_ListPoolsRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_ListPoolsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_ListPoolsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StreamJobsResponse_ListPoolsRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_ListPoolsRequestMultiError is an error wrapping multiple
// validation errors returned by
// StreamJobsResponse_ListPoolsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_ListPoolsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_ListPoolsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_ListPoolsRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_ListPoolsRequestValidationError is the validation error
// returned by StreamJobsResponse_ListPoolsRequest.Validate if the designated
// constraints aren't met.
type StreamJobsResponse_ListPoolsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_ListPoolsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_ListPoolsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_ListPoolsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_ListPoolsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_ListPoolsRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_ListPoolsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_ListPoolsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_ListPoolsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_ListPoolsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_ListPoolsRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_GetPoolStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StreamJobsResponse_GetPoolStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StreamJobsResponse_GetPoolStatusRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StreamJobsResponse_GetPoolStatusRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_GetPoolStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_GetPoolStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolId

	if len(errors) > 0 {
		return StreamJobsResponse_GetPoolStatusRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_GetPoolStatusRequestMultiError is an error wrapping
// multiple validation errors returned by
// StreamJobsResponse_GetPoolStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_GetPoolStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_GetPoolStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_GetPoolStatusRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_GetPoolStatusRequestValidationError is the validation
// error returned by StreamJobsResponse_GetPoolStatusRequest.Validate if the
// designated constraints aren't met.
type StreamJobsResponse_GetPoolStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_GetPoolStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_GetPoolStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_GetPoolStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_GetPoolStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_GetPoolStatusRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_GetPoolStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_GetPoolStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_GetPoolStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_GetPoolStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_GetPoolStatusRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_GetPoolRecordsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StreamJobsResponse_GetPoolRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StreamJobsResponse_GetPoolRecordsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StreamJobsResponse_GetPoolRecordsRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_GetPoolRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_GetPoolRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolId

	if len(errors) > 0 {
		return StreamJobsResponse_GetPoolRecordsRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_GetPoolRecordsRequestMultiError is an error wrapping
// multiple validation errors returned by
// StreamJobsResponse_GetPoolRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_GetPoolRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_GetPoolRecordsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_GetPoolRecordsRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_GetPoolRecordsRequestValidationError is the validation
// error returned by StreamJobsResponse_GetPoolRecordsRequest.Validate if the
// designated constraints aren't met.
type StreamJobsResponse_GetPoolRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_GetPoolRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_GetPoolRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_GetPoolRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_GetPoolRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_GetPoolRecordsRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_GetPoolRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_GetPoolRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_GetPoolRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_GetPoolRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_GetPoolRecordsRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_SearchRecordsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StreamJobsResponse_SearchRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StreamJobsResponse_SearchRecordsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StreamJobsResponse_SearchRecordsRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_SearchRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_SearchRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LookupType

	// no validation rules for LookupValue

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponse_SearchRecordsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponse_SearchRecordsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponse_SearchRecordsRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamJobsResponse_SearchRecordsRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_SearchRecordsRequestMultiError is an error wrapping
// multiple validation errors returned by
// StreamJobsResponse_SearchRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_SearchRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_SearchRecordsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_SearchRecordsRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_SearchRecordsRequestValidationError is the validation
// error returned by StreamJobsResponse_SearchRecordsRequest.Validate if the
// designated constraints aren't met.
type StreamJobsResponse_SearchRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_SearchRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_SearchRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_SearchRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_SearchRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_SearchRecordsRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_SearchRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_SearchRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_SearchRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_SearchRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_SearchRecordsRequestValidationError{}

// Validate checks the field values on
// StreamJobsResponse_GetRecordFieldsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamJobsResponse_GetRecordFieldsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StreamJobsResponse_GetRecordFieldsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StreamJobsResponse_GetRecordFieldsRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_GetRecordFieldsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_GetRecordFieldsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolId

	// no validation rules for RecordId

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponse_GetRecordFieldsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponse_GetRecordFieldsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponse_GetRecordFieldsRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamJobsResponse_GetRecordFieldsRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_GetRecordFieldsRequestMultiError is an error wrapping
// multiple validation errors returned by
// StreamJobsResponse_GetRecordFieldsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_GetRecordFieldsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_GetRecordFieldsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_GetRecordFieldsRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_GetRecordFieldsRequestValidationError is the validation
// error returned by StreamJobsResponse_GetRecordFieldsRequest.Validate if the
// designated constraints aren't met.
type StreamJobsResponse_GetRecordFieldsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_GetRecordFieldsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_GetRecordFieldsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_GetRecordFieldsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_GetRecordFieldsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_GetRecordFieldsRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_GetRecordFieldsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_GetRecordFieldsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_GetRecordFieldsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_GetRecordFieldsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_GetRecordFieldsRequestValidationError{}

// Validate checks the field values on
// StreamJobsResponse_SetRecordFieldsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamJobsResponse_SetRecordFieldsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StreamJobsResponse_SetRecordFieldsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StreamJobsResponse_SetRecordFieldsRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_SetRecordFieldsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_SetRecordFieldsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolId

	// no validation rules for RecordId

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponse_SetRecordFieldsRequestValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponse_SetRecordFieldsRequestValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponse_SetRecordFieldsRequestValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponse_SetRecordFieldsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponse_SetRecordFieldsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponse_SetRecordFieldsRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamJobsResponse_SetRecordFieldsRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_SetRecordFieldsRequestMultiError is an error wrapping
// multiple validation errors returned by
// StreamJobsResponse_SetRecordFieldsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_SetRecordFieldsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_SetRecordFieldsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_SetRecordFieldsRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_SetRecordFieldsRequestValidationError is the validation
// error returned by StreamJobsResponse_SetRecordFieldsRequest.Validate if the
// designated constraints aren't met.
type StreamJobsResponse_SetRecordFieldsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_SetRecordFieldsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_SetRecordFieldsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_SetRecordFieldsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_SetRecordFieldsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_SetRecordFieldsRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_SetRecordFieldsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_SetRecordFieldsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_SetRecordFieldsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_SetRecordFieldsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_SetRecordFieldsRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_ExecuteLogicRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StreamJobsResponse_ExecuteLogicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StreamJobsResponse_ExecuteLogicRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StreamJobsResponse_ExecuteLogicRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_ExecuteLogicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_ExecuteLogicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogicBlockId

	// no validation rules for LogicBlockParams

	if len(errors) > 0 {
		return StreamJobsResponse_ExecuteLogicRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_ExecuteLogicRequestMultiError is an error wrapping
// multiple validation errors returned by
// StreamJobsResponse_ExecuteLogicRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_ExecuteLogicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_ExecuteLogicRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_ExecuteLogicRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_ExecuteLogicRequestValidationError is the validation
// error returned by StreamJobsResponse_ExecuteLogicRequest.Validate if the
// designated constraints aren't met.
type StreamJobsResponse_ExecuteLogicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_ExecuteLogicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_ExecuteLogicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_ExecuteLogicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_ExecuteLogicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_ExecuteLogicRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_ExecuteLogicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_ExecuteLogicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_ExecuteLogicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_ExecuteLogicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_ExecuteLogicRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_CreatePaymentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StreamJobsResponse_CreatePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StreamJobsResponse_CreatePaymentRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// StreamJobsResponse_CreatePaymentRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_CreatePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_CreatePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolId

	// no validation rules for RecordId

	// no validation rules for PaymentId

	// no validation rules for PaymentType

	// no validation rules for PaymentAmount

	if all {
		switch v := interface{}(m.GetPaymentDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamJobsResponse_CreatePaymentRequestValidationError{
					field:  "PaymentDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamJobsResponse_CreatePaymentRequestValidationError{
					field:  "PaymentDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamJobsResponse_CreatePaymentRequestValidationError{
				field:  "PaymentDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StreamJobsResponse_CreatePaymentRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_CreatePaymentRequestMultiError is an error wrapping
// multiple validation errors returned by
// StreamJobsResponse_CreatePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_CreatePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_CreatePaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_CreatePaymentRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_CreatePaymentRequestValidationError is the validation
// error returned by StreamJobsResponse_CreatePaymentRequest.Validate if the
// designated constraints aren't met.
type StreamJobsResponse_CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_CreatePaymentRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_CreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_CreatePaymentRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_PopAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StreamJobsResponse_PopAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamJobsResponse_PopAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamJobsResponse_PopAccountRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_PopAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_PopAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	// no validation rules for PoolId

	// no validation rules for RecordId

	// no validation rules for CallSid

	// no validation rules for CallType

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponse_PopAccountRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponse_PopAccountRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponse_PopAccountRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamJobsResponse_PopAccountRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_PopAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// StreamJobsResponse_PopAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_PopAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_PopAccountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_PopAccountRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_PopAccountRequestValidationError is the validation error
// returned by StreamJobsResponse_PopAccountRequest.Validate if the designated
// constraints aren't met.
type StreamJobsResponse_PopAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_PopAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_PopAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_PopAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_PopAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_PopAccountRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_PopAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_PopAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_PopAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_PopAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_PopAccountRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_InfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamJobsResponse_InfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamJobsResponse_InfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StreamJobsResponse_InfoRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_InfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_InfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StreamJobsResponse_InfoRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_InfoRequestMultiError is an error wrapping multiple
// validation errors returned by StreamJobsResponse_InfoRequest.ValidateAll()
// if the designated constraints aren't met.
type StreamJobsResponse_InfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_InfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_InfoRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_InfoRequestValidationError is the validation error
// returned by StreamJobsResponse_InfoRequest.Validate if the designated
// constraints aren't met.
type StreamJobsResponse_InfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_InfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_InfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_InfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_InfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_InfoRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_InfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_InfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_InfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_InfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_InfoRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_SeppukuRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StreamJobsResponse_SeppukuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamJobsResponse_SeppukuRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamJobsResponse_SeppukuRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_SeppukuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_SeppukuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StreamJobsResponse_SeppukuRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_SeppukuRequestMultiError is an error wrapping multiple
// validation errors returned by
// StreamJobsResponse_SeppukuRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_SeppukuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_SeppukuRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_SeppukuRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_SeppukuRequestValidationError is the validation error
// returned by StreamJobsResponse_SeppukuRequest.Validate if the designated
// constraints aren't met.
type StreamJobsResponse_SeppukuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_SeppukuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_SeppukuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_SeppukuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_SeppukuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_SeppukuRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_SeppukuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_SeppukuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_SeppukuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_SeppukuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_SeppukuRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_LoggingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StreamJobsResponse_LoggingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamJobsResponse_LoggingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamJobsResponse_LoggingRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_LoggingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_LoggingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StreamLogs

	for idx, item := range m.GetLoggerLevels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamJobsResponse_LoggingRequestValidationError{
						field:  fmt.Sprintf("LoggerLevels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamJobsResponse_LoggingRequestValidationError{
						field:  fmt.Sprintf("LoggerLevels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamJobsResponse_LoggingRequestValidationError{
					field:  fmt.Sprintf("LoggerLevels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamJobsResponse_LoggingRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_LoggingRequestMultiError is an error wrapping multiple
// validation errors returned by
// StreamJobsResponse_LoggingRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_LoggingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_LoggingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_LoggingRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_LoggingRequestValidationError is the validation error
// returned by StreamJobsResponse_LoggingRequest.Validate if the designated
// constraints aren't met.
type StreamJobsResponse_LoggingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_LoggingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_LoggingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_LoggingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_LoggingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_LoggingRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_LoggingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_LoggingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_LoggingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_LoggingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_LoggingRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_DiagnosticsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StreamJobsResponse_DiagnosticsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamJobsResponse_DiagnosticsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamJobsResponse_DiagnosticsRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_DiagnosticsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_DiagnosticsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StreamJobsResponse_DiagnosticsRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_DiagnosticsRequestMultiError is an error wrapping
// multiple validation errors returned by
// StreamJobsResponse_DiagnosticsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_DiagnosticsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_DiagnosticsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_DiagnosticsRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_DiagnosticsRequestValidationError is the validation error
// returned by StreamJobsResponse_DiagnosticsRequest.Validate if the
// designated constraints aren't met.
type StreamJobsResponse_DiagnosticsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_DiagnosticsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_DiagnosticsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_DiagnosticsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_DiagnosticsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_DiagnosticsRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_DiagnosticsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_DiagnosticsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_DiagnosticsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_DiagnosticsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_DiagnosticsRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_ListTenantLogsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StreamJobsResponse_ListTenantLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StreamJobsResponse_ListTenantLogsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StreamJobsResponse_ListTenantLogsRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_ListTenantLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_ListTenantLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamJobsResponse_ListTenantLogsRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamJobsResponse_ListTenantLogsRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamJobsResponse_ListTenantLogsRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StreamJobsResponse_ListTenantLogsRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_ListTenantLogsRequestMultiError is an error wrapping
// multiple validation errors returned by
// StreamJobsResponse_ListTenantLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_ListTenantLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_ListTenantLogsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_ListTenantLogsRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_ListTenantLogsRequestValidationError is the validation
// error returned by StreamJobsResponse_ListTenantLogsRequest.Validate if the
// designated constraints aren't met.
type StreamJobsResponse_ListTenantLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_ListTenantLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_ListTenantLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_ListTenantLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_ListTenantLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_ListTenantLogsRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_ListTenantLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_ListTenantLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_ListTenantLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_ListTenantLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_ListTenantLogsRequestValidationError{}

// Validate checks the field values on StreamJobsResponse_SetLogLevelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StreamJobsResponse_SetLogLevelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamJobsResponse_SetLogLevelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamJobsResponse_SetLogLevelRequestMultiError, or nil if none found.
func (m *StreamJobsResponse_SetLogLevelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_SetLogLevelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Log

	// no validation rules for LogLevel

	if len(errors) > 0 {
		return StreamJobsResponse_SetLogLevelRequestMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_SetLogLevelRequestMultiError is an error wrapping
// multiple validation errors returned by
// StreamJobsResponse_SetLogLevelRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamJobsResponse_SetLogLevelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_SetLogLevelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_SetLogLevelRequestMultiError) AllErrors() []error { return m }

// StreamJobsResponse_SetLogLevelRequestValidationError is the validation error
// returned by StreamJobsResponse_SetLogLevelRequest.Validate if the
// designated constraints aren't met.
type StreamJobsResponse_SetLogLevelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_SetLogLevelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_SetLogLevelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamJobsResponse_SetLogLevelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_SetLogLevelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_SetLogLevelRequestValidationError) ErrorName() string {
	return "StreamJobsResponse_SetLogLevelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_SetLogLevelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_SetLogLevelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_SetLogLevelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_SetLogLevelRequestValidationError{}

// Validate checks the field values on
// StreamJobsResponse_LoggingRequest_LoggerLevel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamJobsResponse_LoggingRequest_LoggerLevel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StreamJobsResponse_LoggingRequest_LoggerLevel with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StreamJobsResponse_LoggingRequest_LoggerLevelMultiError, or nil if none found.
func (m *StreamJobsResponse_LoggingRequest_LoggerLevel) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamJobsResponse_LoggingRequest_LoggerLevel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LoggerName

	// no validation rules for LoggerLevel

	if len(errors) > 0 {
		return StreamJobsResponse_LoggingRequest_LoggerLevelMultiError(errors)
	}

	return nil
}

// StreamJobsResponse_LoggingRequest_LoggerLevelMultiError is an error wrapping
// multiple validation errors returned by
// StreamJobsResponse_LoggingRequest_LoggerLevel.ValidateAll() if the
// designated constraints aren't met.
type StreamJobsResponse_LoggingRequest_LoggerLevelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamJobsResponse_LoggingRequest_LoggerLevelMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamJobsResponse_LoggingRequest_LoggerLevelMultiError) AllErrors() []error { return m }

// StreamJobsResponse_LoggingRequest_LoggerLevelValidationError is the
// validation error returned by
// StreamJobsResponse_LoggingRequest_LoggerLevel.Validate if the designated
// constraints aren't met.
type StreamJobsResponse_LoggingRequest_LoggerLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamJobsResponse_LoggingRequest_LoggerLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamJobsResponse_LoggingRequest_LoggerLevelValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StreamJobsResponse_LoggingRequest_LoggerLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamJobsResponse_LoggingRequest_LoggerLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamJobsResponse_LoggingRequest_LoggerLevelValidationError) ErrorName() string {
	return "StreamJobsResponse_LoggingRequest_LoggerLevelValidationError"
}

// Error satisfies the builtin error interface
func (e StreamJobsResponse_LoggingRequest_LoggerLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamJobsResponse_LoggingRequest_LoggerLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamJobsResponse_LoggingRequest_LoggerLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamJobsResponse_LoggingRequest_LoggerLevelValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_ExecuteLogicResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_ExecuteLogicResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_ExecuteLogicResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SubmitJobResultsRequest_ExecuteLogicResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_ExecuteLogicResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_ExecuteLogicResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SubmitJobResultsRequest_ExecuteLogicResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_ExecuteLogicResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_ExecuteLogicResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_ExecuteLogicResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_ExecuteLogicResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_ExecuteLogicResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_ExecuteLogicResultValidationError is the validation
// error returned by SubmitJobResultsRequest_ExecuteLogicResult.Validate if
// the designated constraints aren't met.
type SubmitJobResultsRequest_ExecuteLogicResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_ExecuteLogicResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_ExecuteLogicResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_ExecuteLogicResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_ExecuteLogicResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_ExecuteLogicResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_ExecuteLogicResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_ExecuteLogicResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_ExecuteLogicResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_ExecuteLogicResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_ExecuteLogicResultValidationError{}

// Validate checks the field values on SubmitJobResultsRequest_ListPoolsResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SubmitJobResultsRequest_ListPoolsResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_ListPoolsResult with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SubmitJobResultsRequest_ListPoolsResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_ListPoolsResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_ListPoolsResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPools() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_ListPoolsResultValidationError{
						field:  fmt.Sprintf("Pools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_ListPoolsResultValidationError{
						field:  fmt.Sprintf("Pools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequest_ListPoolsResultValidationError{
					field:  fmt.Sprintf("Pools[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubmitJobResultsRequest_ListPoolsResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_ListPoolsResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_ListPoolsResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_ListPoolsResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_ListPoolsResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_ListPoolsResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_ListPoolsResultValidationError is the validation
// error returned by SubmitJobResultsRequest_ListPoolsResult.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_ListPoolsResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_ListPoolsResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_ListPoolsResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_ListPoolsResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_ListPoolsResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_ListPoolsResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_ListPoolsResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_ListPoolsResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_ListPoolsResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_ListPoolsResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_ListPoolsResultValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_GetPoolStatusResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_GetPoolStatusResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_GetPoolStatusResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SubmitJobResultsRequest_GetPoolStatusResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_GetPoolStatusResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_GetPoolStatusResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPool()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_GetPoolStatusResultValidationError{
					field:  "Pool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_GetPoolStatusResultValidationError{
					field:  "Pool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPool()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_GetPoolStatusResultValidationError{
				field:  "Pool",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubmitJobResultsRequest_GetPoolStatusResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_GetPoolStatusResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_GetPoolStatusResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_GetPoolStatusResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_GetPoolStatusResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_GetPoolStatusResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_GetPoolStatusResultValidationError is the validation
// error returned by SubmitJobResultsRequest_GetPoolStatusResult.Validate if
// the designated constraints aren't met.
type SubmitJobResultsRequest_GetPoolStatusResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_GetPoolStatusResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_GetPoolStatusResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_GetPoolStatusResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_GetPoolStatusResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_GetPoolStatusResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_GetPoolStatusResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_GetPoolStatusResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_GetPoolStatusResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_GetPoolStatusResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_GetPoolStatusResultValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_GetPoolRecordsResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_GetPoolRecordsResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_GetPoolRecordsResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SubmitJobResultsRequest_GetPoolRecordsResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_GetPoolRecordsResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_GetPoolRecordsResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_GetPoolRecordsResultValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_GetPoolRecordsResultValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequest_GetPoolRecordsResultValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubmitJobResultsRequest_GetPoolRecordsResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_GetPoolRecordsResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_GetPoolRecordsResult.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_GetPoolRecordsResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_GetPoolRecordsResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_GetPoolRecordsResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_GetPoolRecordsResultValidationError is the
// validation error returned by
// SubmitJobResultsRequest_GetPoolRecordsResult.Validate if the designated
// constraints aren't met.
type SubmitJobResultsRequest_GetPoolRecordsResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_GetPoolRecordsResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_GetPoolRecordsResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_GetPoolRecordsResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_GetPoolRecordsResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_GetPoolRecordsResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_GetPoolRecordsResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_GetPoolRecordsResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_GetPoolRecordsResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_GetPoolRecordsResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_GetPoolRecordsResultValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_SearchRecordResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_SearchRecordResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_SearchRecordResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SubmitJobResultsRequest_SearchRecordResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_SearchRecordResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_SearchRecordResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_SearchRecordResultValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_SearchRecordResultValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequest_SearchRecordResultValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubmitJobResultsRequest_SearchRecordResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_SearchRecordResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_SearchRecordResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_SearchRecordResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_SearchRecordResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_SearchRecordResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_SearchRecordResultValidationError is the validation
// error returned by SubmitJobResultsRequest_SearchRecordResult.Validate if
// the designated constraints aren't met.
type SubmitJobResultsRequest_SearchRecordResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_SearchRecordResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_SearchRecordResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_SearchRecordResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_SearchRecordResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_SearchRecordResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_SearchRecordResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_SearchRecordResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_SearchRecordResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_SearchRecordResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_SearchRecordResultValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_GetRecordFieldsResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_GetRecordFieldsResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_GetRecordFieldsResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SubmitJobResultsRequest_GetRecordFieldsResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_GetRecordFieldsResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_GetRecordFieldsResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_GetRecordFieldsResultValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_GetRecordFieldsResultValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequest_GetRecordFieldsResultValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubmitJobResultsRequest_GetRecordFieldsResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_GetRecordFieldsResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_GetRecordFieldsResult.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_GetRecordFieldsResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_GetRecordFieldsResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_GetRecordFieldsResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_GetRecordFieldsResultValidationError is the
// validation error returned by
// SubmitJobResultsRequest_GetRecordFieldsResult.Validate if the designated
// constraints aren't met.
type SubmitJobResultsRequest_GetRecordFieldsResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_GetRecordFieldsResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_GetRecordFieldsResultValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_GetRecordFieldsResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_GetRecordFieldsResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_GetRecordFieldsResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_GetRecordFieldsResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_GetRecordFieldsResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_GetRecordFieldsResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_GetRecordFieldsResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_GetRecordFieldsResultValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_SetRecordFieldsResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_SetRecordFieldsResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_SetRecordFieldsResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SubmitJobResultsRequest_SetRecordFieldsResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_SetRecordFieldsResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_SetRecordFieldsResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubmitJobResultsRequest_SetRecordFieldsResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_SetRecordFieldsResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_SetRecordFieldsResult.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_SetRecordFieldsResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_SetRecordFieldsResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_SetRecordFieldsResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_SetRecordFieldsResultValidationError is the
// validation error returned by
// SubmitJobResultsRequest_SetRecordFieldsResult.Validate if the designated
// constraints aren't met.
type SubmitJobResultsRequest_SetRecordFieldsResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_SetRecordFieldsResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_SetRecordFieldsResultValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_SetRecordFieldsResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_SetRecordFieldsResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_SetRecordFieldsResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_SetRecordFieldsResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_SetRecordFieldsResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_SetRecordFieldsResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_SetRecordFieldsResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_SetRecordFieldsResultValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_CreatePaymentResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_CreatePaymentResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_CreatePaymentResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SubmitJobResultsRequest_CreatePaymentResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_CreatePaymentResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_CreatePaymentResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubmitJobResultsRequest_CreatePaymentResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_CreatePaymentResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_CreatePaymentResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_CreatePaymentResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_CreatePaymentResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_CreatePaymentResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_CreatePaymentResultValidationError is the validation
// error returned by SubmitJobResultsRequest_CreatePaymentResult.Validate if
// the designated constraints aren't met.
type SubmitJobResultsRequest_CreatePaymentResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_CreatePaymentResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_CreatePaymentResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_CreatePaymentResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_CreatePaymentResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_CreatePaymentResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_CreatePaymentResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_CreatePaymentResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_CreatePaymentResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_CreatePaymentResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_CreatePaymentResultValidationError{}

// Validate checks the field values on SubmitJobResultsRequest_PopAccountResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SubmitJobResultsRequest_PopAccountResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_PopAccountResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SubmitJobResultsRequest_PopAccountResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_PopAccountResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_PopAccountResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubmitJobResultsRequest_PopAccountResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_PopAccountResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_PopAccountResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_PopAccountResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_PopAccountResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_PopAccountResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_PopAccountResultValidationError is the validation
// error returned by SubmitJobResultsRequest_PopAccountResult.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_PopAccountResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_PopAccountResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_PopAccountResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_PopAccountResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_PopAccountResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_PopAccountResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_PopAccountResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_PopAccountResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_PopAccountResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_PopAccountResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_PopAccountResultValidationError{}

// Validate checks the field values on SubmitJobResultsRequest_ErrorResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SubmitJobResultsRequest_ErrorResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitJobResultsRequest_ErrorResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_ErrorResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_ErrorResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_ErrorResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return SubmitJobResultsRequest_ErrorResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_ErrorResultMultiError is an error wrapping multiple
// validation errors returned by
// SubmitJobResultsRequest_ErrorResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_ErrorResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_ErrorResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_ErrorResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_ErrorResultValidationError is the validation error
// returned by SubmitJobResultsRequest_ErrorResult.Validate if the designated
// constraints aren't met.
type SubmitJobResultsRequest_ErrorResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_ErrorResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_ErrorResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_ErrorResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_ErrorResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_ErrorResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_ErrorResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_ErrorResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_ErrorResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_ErrorResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_ErrorResultValidationError{}

// Validate checks the field values on SubmitJobResultsRequest_InfoResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SubmitJobResultsRequest_InfoResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitJobResultsRequest_InfoResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_InfoResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_InfoResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_InfoResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoreVersion

	// no validation rules for ServerName

	// no validation rules for PluginVersion

	// no validation rules for PluginName

	if len(errors) > 0 {
		return SubmitJobResultsRequest_InfoResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_InfoResultMultiError is an error wrapping multiple
// validation errors returned by
// SubmitJobResultsRequest_InfoResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_InfoResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_InfoResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_InfoResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_InfoResultValidationError is the validation error
// returned by SubmitJobResultsRequest_InfoResult.Validate if the designated
// constraints aren't met.
type SubmitJobResultsRequest_InfoResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_InfoResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_InfoResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_InfoResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_InfoResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_InfoResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_InfoResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_InfoResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_InfoResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_InfoResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_InfoResultValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResultValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Hostname

	if all {
		switch v := interface{}(m.GetOperatingSystem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "OperatingSystem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "OperatingSystem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatingSystem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResultValidationError{
				field:  "OperatingSystem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJavaRuntime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "JavaRuntime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "JavaRuntime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJavaRuntime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResultValidationError{
				field:  "JavaRuntime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHardware()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "Hardware",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "Hardware",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHardware()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResultValidationError{
				field:  "Hardware",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResultValidationError{
				field:  "Memory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStorage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
						field:  fmt.Sprintf("Storage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
						field:  fmt.Sprintf("Storage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  fmt.Sprintf("Storage[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetContainer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResultValidationError{
				field:  "Container",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnvironmentVariables()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "EnvironmentVariables",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "EnvironmentVariables",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnvironmentVariables()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResultValidationError{
				field:  "EnvironmentVariables",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSystemProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "SystemProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "SystemProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystemProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResultValidationError{
				field:  "SystemProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetHikariPoolMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
						field:  fmt.Sprintf("HikariPoolMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
						field:  fmt.Sprintf("HikariPoolMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  fmt.Sprintf("HikariPoolMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetConfigDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "ConfigDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "ConfigDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResultValidationError{
				field:  "ConfigDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEventStreamStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "EventStreamStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResultValidationError{
					field:  "EventStreamStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventStreamStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResultValidationError{
				field:  "EventStreamStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_DiagnosticsResultValidationError is the validation
// error returned by SubmitJobResultsRequest_DiagnosticsResult.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResultValidationError{}

// Validate checks the field values on SubmitJobResultsRequest_SeppukuResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SubmitJobResultsRequest_SeppukuResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitJobResultsRequest_SeppukuResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_SeppukuResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_SeppukuResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_SeppukuResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubmitJobResultsRequest_SeppukuResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_SeppukuResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_SeppukuResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_SeppukuResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_SeppukuResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_SeppukuResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_SeppukuResultValidationError is the validation error
// returned by SubmitJobResultsRequest_SeppukuResult.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_SeppukuResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_SeppukuResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_SeppukuResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_SeppukuResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_SeppukuResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_SeppukuResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_SeppukuResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_SeppukuResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_SeppukuResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_SeppukuResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_SeppukuResultValidationError{}

// Validate checks the field values on SubmitJobResultsRequest_LoggingResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SubmitJobResultsRequest_LoggingResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitJobResultsRequest_LoggingResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_LoggingResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_LoggingResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_LoggingResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubmitJobResultsRequest_LoggingResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_LoggingResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_LoggingResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_LoggingResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_LoggingResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_LoggingResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_LoggingResultValidationError is the validation error
// returned by SubmitJobResultsRequest_LoggingResult.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_LoggingResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_LoggingResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_LoggingResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_LoggingResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_LoggingResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_LoggingResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_LoggingResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_LoggingResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_LoggingResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_LoggingResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_LoggingResultValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_ListTenantLogsResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_ListTenantLogsResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_ListTenantLogsResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SubmitJobResultsRequest_ListTenantLogsResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_ListTenantLogsResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_ListTenantLogsResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_ListTenantLogsResultValidationError{
						field:  fmt.Sprintf("LogGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_ListTenantLogsResultValidationError{
						field:  fmt.Sprintf("LogGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequest_ListTenantLogsResultValidationError{
					field:  fmt.Sprintf("LogGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return SubmitJobResultsRequest_ListTenantLogsResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_ListTenantLogsResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_ListTenantLogsResult.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_ListTenantLogsResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_ListTenantLogsResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_ListTenantLogsResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_ListTenantLogsResultValidationError is the
// validation error returned by
// SubmitJobResultsRequest_ListTenantLogsResult.Validate if the designated
// constraints aren't met.
type SubmitJobResultsRequest_ListTenantLogsResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_ListTenantLogsResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_ListTenantLogsResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_ListTenantLogsResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_ListTenantLogsResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_ListTenantLogsResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_ListTenantLogsResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_ListTenantLogsResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_ListTenantLogsResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_ListTenantLogsResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_ListTenantLogsResultValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_SetLogLevelResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_SetLogLevelResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_SetLogLevelResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SubmitJobResultsRequest_SetLogLevelResultMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_SetLogLevelResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_SetLogLevelResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_SetLogLevelResultValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_SetLogLevelResultValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_SetLogLevelResultValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubmitJobResultsRequest_SetLogLevelResultMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_SetLogLevelResultMultiError is an error wrapping
// multiple validation errors returned by
// SubmitJobResultsRequest_SetLogLevelResult.ValidateAll() if the designated
// constraints aren't met.
type SubmitJobResultsRequest_SetLogLevelResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_SetLogLevelResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_SetLogLevelResultMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_SetLogLevelResultValidationError is the validation
// error returned by SubmitJobResultsRequest_SetLogLevelResult.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_SetLogLevelResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_SetLogLevelResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitJobResultsRequest_SetLogLevelResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitJobResultsRequest_SetLogLevelResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitJobResultsRequest_SetLogLevelResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_SetLogLevelResultValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_SetLogLevelResultValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_SetLogLevelResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_SetLogLevelResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_SetLogLevelResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_SetLogLevelResultValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_OperatingSystem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_OperatingSystem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_OperatingSystem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemMultiError, or nil
// if none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_OperatingSystem) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_OperatingSystem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Architecture

	// no validation rules for Manufacturer

	// no validation rules for AvailableProcessors

	// no validation rules for SystemUptime

	// no validation rules for SystemLoadAverage

	// no validation rules for TotalPhysicalMemory

	// no validation rules for AvailablePhysicalMemory

	// no validation rules for TotalSwapSpace

	// no validation rules for AvailableSwapSpace

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemMultiError is an
// error wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_OperatingSystem.ValidateAll() if
// the designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemMultiError) AllErrors() []error {
	return m
}

// SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemValidationError is
// the validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_OperatingSystem.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_OperatingSystem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_OperatingSystemValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_JavaRuntime with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_JavaRuntime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_JavaRuntime with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeMultiError, or nil if
// none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_JavaRuntime) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_JavaRuntime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Vendor

	// no validation rules for RuntimeName

	// no validation rules for VmName

	// no validation rules for VmVersion

	// no validation rules for VmVendor

	// no validation rules for SpecificationName

	// no validation rules for SpecificationVersion

	// no validation rules for ClassPath

	// no validation rules for LibraryPath

	// no validation rules for Uptime

	// no validation rules for StartTime

	// no validation rules for ManagementSpecVersion

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeMultiError is an error
// wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_JavaRuntime.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeMultiError) AllErrors() []error {
	return m
}

// SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeValidationError is the
// validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_JavaRuntime.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_JavaRuntime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_JavaRuntimeValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_Hardware with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_Hardware) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_Hardware with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_HardwareMultiError, or nil if
// none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_Hardware) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_Hardware) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Model

	// no validation rules for Manufacturer

	// no validation rules for SerialNumber

	// no validation rules for Uuid

	if all {
		switch v := interface{}(m.GetProcessor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError{
					field:  "Processor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError{
					field:  "Processor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError{
				field:  "Processor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_HardwareMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_HardwareMultiError is an error
// wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_Hardware.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_HardwareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_HardwareMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_HardwareMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError is the
// validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_Hardware.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_Hardware.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_HardwareValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_Processor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_Processor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_Processor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_ProcessorMultiError, or nil if
// none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_Processor) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_Processor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Identifier

	// no validation rules for Architecture

	// no validation rules for PhysicalProcessorCount

	// no validation rules for LogicalProcessorCount

	// no validation rules for MaxFrequency

	// no validation rules for Cpu_64Bit

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_ProcessorMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_ProcessorMultiError is an error
// wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_Processor.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_ProcessorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_ProcessorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_ProcessorMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_DiagnosticsResult_ProcessorValidationError is the
// validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_Processor.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_ProcessorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ProcessorValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ProcessorValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ProcessorValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ProcessorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_ProcessorValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_ProcessorValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_ProcessorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_Processor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_ProcessorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_ProcessorValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_Memory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_Memory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_Memory with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_MemoryMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_Memory) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_Memory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HeapMemoryUsed

	// no validation rules for HeapMemoryMax

	// no validation rules for HeapMemoryCommitted

	// no validation rules for NonHeapMemoryUsed

	// no validation rules for NonHeapMemoryMax

	// no validation rules for NonHeapMemoryCommitted

	for idx, item := range m.GetMemoryPools() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError{
						field:  fmt.Sprintf("MemoryPools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError{
						field:  fmt.Sprintf("MemoryPools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError{
					field:  fmt.Sprintf("MemoryPools[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_MemoryMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_MemoryMultiError is an error
// wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_Memory.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_MemoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_MemoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_MemoryMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError is the
// validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_Memory.Validate if the designated
// constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_Memory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_MemoryValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_MemoryPool with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_MemoryPool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_MemoryPool with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolMultiError, or nil if
// none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_MemoryPool) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_MemoryPool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Used

	// no validation rules for Max

	// no validation rules for Committed

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolMultiError is an error
// wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_MemoryPool.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolValidationError is the
// validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_MemoryPool.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_MemoryPool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_MemoryPoolValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_Storage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_Storage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_Storage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_StorageMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_Storage) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_Storage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Model

	// no validation rules for SerialNumber

	// no validation rules for Size

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_StorageMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_StorageMultiError is an error
// wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_Storage.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_StorageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_StorageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_StorageMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_DiagnosticsResult_StorageValidationError is the
// validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_Storage.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_StorageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_StorageValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_StorageValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_StorageValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_StorageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_StorageValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_StorageValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_StorageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_Storage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_StorageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_StorageValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_Container with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_Container with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_ContainerMultiError, or nil if
// none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_Container) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsContainer

	// no validation rules for ContainerType

	// no validation rules for ContainerId

	// no validation rules for ContainerName

	// no validation rules for ImageName

	// no validation rules for ResourceLimits

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_ContainerMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_ContainerMultiError is an error
// wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_Container.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_ContainerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_ContainerMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_DiagnosticsResult_ContainerValidationError is the
// validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_Container.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ContainerValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ContainerValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ContainerValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_ContainerValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_ContainerValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_Container.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_ContainerValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariables with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariables) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariables with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesMultiError,
// or nil if none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariables) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariables) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Language

	// no validation rules for Path

	// no validation rules for Hostname

	// no validation rules for LcAll

	// no validation rules for JavaHome

	// no validation rules for JavaVersion

	// no validation rules for Lang

	// no validation rules for Home

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesMultiError is
// an error wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariables.ValidateAll()
// if the designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesMultiError) AllErrors() []error {
	return m
}

// SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesValidationError
// is the validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariables.Validate if
// the designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_EnvironmentVariablesValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_SystemProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_SystemProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_SystemProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesMultiError, or
// nil if none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_SystemProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_SystemProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JavaSpecificationVersion

	// no validation rules for JavaSpecificationVendor

	// no validation rules for JavaSpecificationName

	// no validation rules for JavaSpecificationMaintenanceVersion

	// no validation rules for JavaVersion

	// no validation rules for JavaVersionDate

	// no validation rules for JavaVendor

	// no validation rules for JavaVendorVersion

	// no validation rules for JavaVendorUrl

	// no validation rules for JavaVendorUrlBug

	// no validation rules for JavaRuntimeName

	// no validation rules for JavaRuntimeVersion

	// no validation rules for JavaHome

	// no validation rules for JavaClassPath

	// no validation rules for JavaLibraryPath

	// no validation rules for JavaClassVersion

	// no validation rules for JavaVmName

	// no validation rules for JavaVmVersion

	// no validation rules for JavaVmVendor

	// no validation rules for JavaVmInfo

	// no validation rules for JavaVmSpecificationVersion

	// no validation rules for JavaVmSpecificationVendor

	// no validation rules for JavaVmSpecificationName

	// no validation rules for JavaVmCompressedOopsMode

	// no validation rules for OsName

	// no validation rules for OsVersion

	// no validation rules for OsArch

	// no validation rules for UserName

	// no validation rules for UserHome

	// no validation rules for UserDir

	// no validation rules for UserTimezone

	// no validation rules for UserCountry

	// no validation rules for UserLanguage

	// no validation rules for FileSeparator

	// no validation rules for PathSeparator

	// no validation rules for LineSeparator

	// no validation rules for FileEncoding

	// no validation rules for NativeEncoding

	// no validation rules for SunJnuEncoding

	// no validation rules for SunArchDataModel

	// no validation rules for SunJavaLauncher

	// no validation rules for SunBootLibraryPath

	// no validation rules for SunJavaCommand

	// no validation rules for SunCpuEndian

	// no validation rules for SunManagementCompiler

	// no validation rules for SunIoUnicodeEncoding

	// no validation rules for JdkDebug

	// no validation rules for JavaIoTmpdir

	// no validation rules for Env

	// no validation rules for MicronautClassloaderLogging

	// no validation rules for IoNettyAllocatorMaxOrder

	// no validation rules for IoNettyProcessId

	// no validation rules for IoNettyMachineId

	// no validation rules for ComZaxxerHikariPoolNumber

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesMultiError is an
// error wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_SystemProperties.ValidateAll() if
// the designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesMultiError) AllErrors() []error {
	return m
}

// SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesValidationError is
// the validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_SystemProperties.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_SystemProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_SystemPropertiesValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsMultiError, or
// nil if none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolName

	// no validation rules for ActiveConnections

	// no validation rules for IdleConnections

	// no validation rules for TotalConnections

	// no validation rules for ThreadsAwaitingConnection

	if all {
		switch v := interface{}(m.GetPoolConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError{
					field:  "PoolConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError{
					field:  "PoolConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoolConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError{
				field:  "PoolConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ExtendedMetrics

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsMultiError is an
// error wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics.ValidateAll()
// if the designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsMultiError) AllErrors() []error {
	return m
}

// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError
// is the validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetricsValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_ConfigDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_ConfigDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_ConfigDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsMultiError, or nil
// if none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_ConfigDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_ConfigDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiEndpoint

	// no validation rules for CertificateName

	// no validation rules for CertificateDescription

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsMultiError is an
// error wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_ConfigDetails.ValidateAll() if
// the designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsMultiError) AllErrors() []error {
	return m
}

// SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsValidationError is
// the validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_ConfigDetails.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_ConfigDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_ConfigDetailsValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_EventStreamStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_EventStreamStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_EventStreamStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsMultiError, or
// nil if none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_EventStreamStats) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_EventStreamStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StreamName

	// no validation rules for Status

	// no validation rules for MaxJobs

	// no validation rules for RunningJobs

	// no validation rules for CompletedJobs

	// no validation rules for QueuedJobs

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsMultiError is an
// error wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_EventStreamStats.ValidateAll() if
// the designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsMultiError) AllErrors() []error {
	return m
}

// SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsValidationError is
// the validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_EventStreamStats.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_EventStreamStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_EventStreamStatsValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigMultiError,
// or nil if none found.
func (m *SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PoolName

	// no validation rules for ConnectionTimeout

	// no validation rules for ValidationTimeout

	// no validation rules for IdleTimeout

	// no validation rules for MaxLifetime

	// no validation rules for MinimumIdle

	// no validation rules for MaximumPoolSize

	// no validation rules for LeakDetectionThreshold

	// no validation rules for JdbcUrl

	// no validation rules for Username

	if len(errors) > 0 {
		return SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigMultiError
// is an error wrapping multiple validation errors returned by
// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfig.ValidateAll()
// if the designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigMultiError) AllErrors() []error {
	return m
}

// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigValidationError
// is the validation error returned by
// SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfig.Validate
// if the designated constraints aren't met.
type SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_DiagnosticsResult_HikariPoolMetrics_PoolConfigValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_ListTenantLogsResult_LogGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_ListTenantLogsResult_LogGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_ListTenantLogsResult_LogGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitJobResultsRequest_ListTenantLogsResult_LogGroupMultiError, or nil if
// none found.
func (m *SubmitJobResultsRequest_ListTenantLogsResult_LogGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_ListTenantLogsResult_LogGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LogLevels

	if len(errors) > 0 {
		return SubmitJobResultsRequest_ListTenantLogsResult_LogGroupMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_ListTenantLogsResult_LogGroupMultiError is an error
// wrapping multiple validation errors returned by
// SubmitJobResultsRequest_ListTenantLogsResult_LogGroup.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_ListTenantLogsResult_LogGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_ListTenantLogsResult_LogGroupMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_ListTenantLogsResult_LogGroupMultiError) AllErrors() []error {
	return m
}

// SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError is the
// validation error returned by
// SubmitJobResultsRequest_ListTenantLogsResult_LogGroup.Validate if the
// designated constraints aren't met.
type SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_ListTenantLogsResult_LogGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_ListTenantLogsResult_LogGroupValidationError{}

// Validate checks the field values on
// SubmitJobResultsRequest_SetLogLevelResult_Tenant with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitJobResultsRequest_SetLogLevelResult_Tenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitJobResultsRequest_SetLogLevelResult_Tenant with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SubmitJobResultsRequest_SetLogLevelResult_TenantMultiError, or nil if none found.
func (m *SubmitJobResultsRequest_SetLogLevelResult_Tenant) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitJobResultsRequest_SetLogLevelResult_Tenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for SatiVersion

	// no validation rules for PluginVersion

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConnectedGate

	if len(errors) > 0 {
		return SubmitJobResultsRequest_SetLogLevelResult_TenantMultiError(errors)
	}

	return nil
}

// SubmitJobResultsRequest_SetLogLevelResult_TenantMultiError is an error
// wrapping multiple validation errors returned by
// SubmitJobResultsRequest_SetLogLevelResult_Tenant.ValidateAll() if the
// designated constraints aren't met.
type SubmitJobResultsRequest_SetLogLevelResult_TenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitJobResultsRequest_SetLogLevelResult_TenantMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitJobResultsRequest_SetLogLevelResult_TenantMultiError) AllErrors() []error { return m }

// SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError is the
// validation error returned by
// SubmitJobResultsRequest_SetLogLevelResult_Tenant.Validate if the designated
// constraints aren't met.
type SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError) ErrorName() string {
	return "SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitJobResultsRequest_SetLogLevelResult_Tenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitJobResultsRequest_SetLogLevelResult_TenantValidationError{}

// Validate checks the field values on AddScrubListEntriesRequest_Entry with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddScrubListEntriesRequest_Entry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddScrubListEntriesRequest_Entry with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddScrubListEntriesRequest_EntryMultiError, or nil if none found.
func (m *AddScrubListEntriesRequest_Entry) ValidateAll() error {
	return m.validate(true)
}

func (m *AddScrubListEntriesRequest_Entry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddScrubListEntriesRequest_EntryValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddScrubListEntriesRequest_EntryValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddScrubListEntriesRequest_EntryValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddScrubListEntriesRequest_EntryValidationError{
					field:  "Notes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddScrubListEntriesRequest_EntryValidationError{
					field:  "Notes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddScrubListEntriesRequest_EntryValidationError{
				field:  "Notes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddScrubListEntriesRequest_EntryMultiError(errors)
	}

	return nil
}

// AddScrubListEntriesRequest_EntryMultiError is an error wrapping multiple
// validation errors returned by
// AddScrubListEntriesRequest_Entry.ValidateAll() if the designated
// constraints aren't met.
type AddScrubListEntriesRequest_EntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddScrubListEntriesRequest_EntryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddScrubListEntriesRequest_EntryMultiError) AllErrors() []error { return m }

// AddScrubListEntriesRequest_EntryValidationError is the validation error
// returned by AddScrubListEntriesRequest_Entry.Validate if the designated
// constraints aren't met.
type AddScrubListEntriesRequest_EntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddScrubListEntriesRequest_EntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddScrubListEntriesRequest_EntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddScrubListEntriesRequest_EntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddScrubListEntriesRequest_EntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddScrubListEntriesRequest_EntryValidationError) ErrorName() string {
	return "AddScrubListEntriesRequest_EntryValidationError"
}

// Error satisfies the builtin error interface
func (e AddScrubListEntriesRequest_EntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddScrubListEntriesRequest_Entry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddScrubListEntriesRequest_EntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddScrubListEntriesRequest_EntryValidationError{}

// Validate checks the field values on TransferRequest_Agent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferRequest_Agent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferRequest_Agent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferRequest_AgentMultiError, or nil if none found.
func (m *TransferRequest_Agent) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferRequest_Agent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return TransferRequest_AgentMultiError(errors)
	}

	return nil
}

// TransferRequest_AgentMultiError is an error wrapping multiple validation
// errors returned by TransferRequest_Agent.ValidateAll() if the designated
// constraints aren't met.
type TransferRequest_AgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferRequest_AgentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferRequest_AgentMultiError) AllErrors() []error { return m }

// TransferRequest_AgentValidationError is the validation error returned by
// TransferRequest_Agent.Validate if the designated constraints aren't met.
type TransferRequest_AgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferRequest_AgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferRequest_AgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferRequest_AgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferRequest_AgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferRequest_AgentValidationError) ErrorName() string {
	return "TransferRequest_AgentValidationError"
}

// Error satisfies the builtin error interface
func (e TransferRequest_AgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferRequest_Agent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferRequest_AgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferRequest_AgentValidationError{}

// Validate checks the field values on TransferRequest_Outbound with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferRequest_Outbound) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferRequest_Outbound with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferRequest_OutboundMultiError, or nil if none found.
func (m *TransferRequest_Outbound) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferRequest_Outbound) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallerId

	// no validation rules for Destination

	// no validation rules for CallerHold

	if len(errors) > 0 {
		return TransferRequest_OutboundMultiError(errors)
	}

	return nil
}

// TransferRequest_OutboundMultiError is an error wrapping multiple validation
// errors returned by TransferRequest_Outbound.ValidateAll() if the designated
// constraints aren't met.
type TransferRequest_OutboundMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferRequest_OutboundMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferRequest_OutboundMultiError) AllErrors() []error { return m }

// TransferRequest_OutboundValidationError is the validation error returned by
// TransferRequest_Outbound.Validate if the designated constraints aren't met.
type TransferRequest_OutboundValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferRequest_OutboundValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferRequest_OutboundValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferRequest_OutboundValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferRequest_OutboundValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferRequest_OutboundValidationError) ErrorName() string {
	return "TransferRequest_OutboundValidationError"
}

// Error satisfies the builtin error interface
func (e TransferRequest_OutboundValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferRequest_Outbound.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferRequest_OutboundValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferRequest_OutboundValidationError{}

// Validate checks the field values on TransferRequest_Queue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferRequest_Queue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferRequest_Queue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferRequest_QueueMultiError, or nil if none found.
func (m *TransferRequest_Queue) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferRequest_Queue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransferRequest_QueueMultiError(errors)
	}

	return nil
}

// TransferRequest_QueueMultiError is an error wrapping multiple validation
// errors returned by TransferRequest_Queue.ValidateAll() if the designated
// constraints aren't met.
type TransferRequest_QueueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferRequest_QueueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferRequest_QueueMultiError) AllErrors() []error { return m }

// TransferRequest_QueueValidationError is the validation error returned by
// TransferRequest_Queue.Validate if the designated constraints aren't met.
type TransferRequest_QueueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferRequest_QueueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferRequest_QueueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferRequest_QueueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferRequest_QueueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferRequest_QueueValidationError) ErrorName() string {
	return "TransferRequest_QueueValidationError"
}

// Error satisfies the builtin error interface
func (e TransferRequest_QueueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferRequest_Queue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferRequest_QueueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferRequest_QueueValidationError{}
