// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tcnapi/exile/gate/v2/entities.proto

package gatev2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExileAgentCall with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExileAgentCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExileAgentCall with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExileAgentCallMultiError,
// or nil if none found.
func (m *ExileAgentCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ExileAgentCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentCallSid

	// no validation rules for CallSid

	// no validation rules for CallType

	// no validation rules for TalkDuration

	// no validation rules for CallWaitDuration

	// no validation rules for WrapUpDuration

	// no validation rules for PauseDuration

	// no validation rules for TransferDuration

	// no validation rules for ManualDuration

	// no validation rules for PreviewDuration

	// no validation rules for HoldDuration

	// no validation rules for AgentWaitDuration

	// no validation rules for SuspendedDuration

	// no validation rules for ExternalTransferDuration

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileAgentCallValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileAgentCallValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileAgentCallValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileAgentCallValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileAgentCallValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileAgentCallValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgId

	// no validation rules for UserId

	// no validation rules for InternalKey

	for idx, item := range m.GetTaskDataKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExileAgentCallValidationError{
						field:  fmt.Sprintf("TaskDataKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExileAgentCallValidationError{
						field:  fmt.Sprintf("TaskDataKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExileAgentCallValidationError{
					field:  fmt.Sprintf("TaskDataKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTaskDataValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExileAgentCallValidationError{
						field:  fmt.Sprintf("TaskDataValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExileAgentCallValidationError{
						field:  fmt.Sprintf("TaskDataValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExileAgentCallValidationError{
					field:  fmt.Sprintf("TaskDataValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return ExileAgentCallMultiError(errors)
	}

	return nil
}

// ExileAgentCallMultiError is an error wrapping multiple validation errors
// returned by ExileAgentCall.ValidateAll() if the designated constraints
// aren't met.
type ExileAgentCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExileAgentCallMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExileAgentCallMultiError) AllErrors() []error { return m }

// ExileAgentCallValidationError is the validation error returned by
// ExileAgentCall.Validate if the designated constraints aren't met.
type ExileAgentCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExileAgentCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExileAgentCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExileAgentCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExileAgentCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExileAgentCallValidationError) ErrorName() string { return "ExileAgentCallValidationError" }

// Error satisfies the builtin error interface
func (e ExileAgentCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExileAgentCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExileAgentCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExileAgentCallValidationError{}

// Validate checks the field values on StringField with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StringField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringField with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StringFieldMultiError, or
// nil if none found.
func (m *StringField) ValidateAll() error {
	return m.validate(true)
}

func (m *StringField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Value != nil {
		// no validation rules for Value
	}

	if len(errors) > 0 {
		return StringFieldMultiError(errors)
	}

	return nil
}

// StringFieldMultiError is an error wrapping multiple validation errors
// returned by StringField.ValidateAll() if the designated constraints aren't met.
type StringFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringFieldMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringFieldMultiError) AllErrors() []error { return m }

// StringFieldValidationError is the validation error returned by
// StringField.Validate if the designated constraints aren't met.
type StringFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFieldValidationError) ErrorName() string { return "StringFieldValidationError" }

// Error satisfies the builtin error interface
func (e StringFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFieldValidationError{}

// Validate checks the field values on ExileTelephonyResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExileTelephonyResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExileTelephonyResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExileTelephonyResultMultiError, or nil if none found.
func (m *ExileTelephonyResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ExileTelephonyResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallSid

	// no validation rules for CallType

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTelephonyResultValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTelephonyResultValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTelephonyResultValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTelephonyResultValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTelephonyResultValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTelephonyResultValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Result

	// no validation rules for CallerId

	// no validation rules for PhoneNumber

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTelephonyResultValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTelephonyResultValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTelephonyResultValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTelephonyResultValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTelephonyResultValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTelephonyResultValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeliveryLength

	// no validation rules for LinkbackLength

	// no validation rules for PoolId

	// no validation rules for RecordId

	// no validation rules for ClientSid

	// no validation rules for OrgId

	// no validation rules for InternalKey

	for idx, item := range m.GetTaskDataKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExileTelephonyResultValidationError{
						field:  fmt.Sprintf("TaskDataKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExileTelephonyResultValidationError{
						field:  fmt.Sprintf("TaskDataKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExileTelephonyResultValidationError{
					field:  fmt.Sprintf("TaskDataKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTaskDataValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExileTelephonyResultValidationError{
						field:  fmt.Sprintf("TaskDataValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExileTelephonyResultValidationError{
						field:  fmt.Sprintf("TaskDataValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExileTelephonyResultValidationError{
					field:  fmt.Sprintf("TaskDataValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExileTelephonyResultMultiError(errors)
	}

	return nil
}

// ExileTelephonyResultMultiError is an error wrapping multiple validation
// errors returned by ExileTelephonyResult.ValidateAll() if the designated
// constraints aren't met.
type ExileTelephonyResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExileTelephonyResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExileTelephonyResultMultiError) AllErrors() []error { return m }

// ExileTelephonyResultValidationError is the validation error returned by
// ExileTelephonyResult.Validate if the designated constraints aren't met.
type ExileTelephonyResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExileTelephonyResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExileTelephonyResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExileTelephonyResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExileTelephonyResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExileTelephonyResultValidationError) ErrorName() string {
	return "ExileTelephonyResultValidationError"
}

// Error satisfies the builtin error interface
func (e ExileTelephonyResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExileTelephonyResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExileTelephonyResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExileTelephonyResultValidationError{}

// Validate checks the field values on ExileAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExileAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExileAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExileAgentResponseMultiError, or nil if none found.
func (m *ExileAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExileAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentCallResponseSid

	// no validation rules for CallSid

	// no validation rules for CallType

	// no validation rules for ResponseKey

	// no validation rules for ResponseValue

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileAgentResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileAgentResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileAgentResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileAgentResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileAgentResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileAgentResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClientSid

	// no validation rules for OrgId

	// no validation rules for AgentSid

	// no validation rules for UserId

	// no validation rules for InternalKey

	// no validation rules for PartnerAgentId

	if len(errors) > 0 {
		return ExileAgentResponseMultiError(errors)
	}

	return nil
}

// ExileAgentResponseMultiError is an error wrapping multiple validation errors
// returned by ExileAgentResponse.ValidateAll() if the designated constraints
// aren't met.
type ExileAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExileAgentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExileAgentResponseMultiError) AllErrors() []error { return m }

// ExileAgentResponseValidationError is the validation error returned by
// ExileAgentResponse.Validate if the designated constraints aren't met.
type ExileAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExileAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExileAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExileAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExileAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExileAgentResponseValidationError) ErrorName() string {
	return "ExileAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExileAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExileAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExileAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExileAgentResponseValidationError{}

// Validate checks the field values on ExileTransferInstance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExileTransferInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExileTransferInstance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExileTransferInstanceMultiError, or nil if none found.
func (m *ExileTransferInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *ExileTransferInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientSid

	// no validation rules for OrgId

	// no validation rules for TransferInstanceId

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTransferInstanceValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTransferInstanceValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTransferInstanceValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTransferInstanceValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTransferPendingStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "TransferPendingStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "TransferPendingStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransferPendingStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTransferInstanceValidationError{
				field:  "TransferPendingStartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTransferStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "TransferStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "TransferStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransferStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTransferInstanceValidationError{
				field:  "TransferStartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTransferEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "TransferEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "TransferEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransferEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTransferInstanceValidationError{
				field:  "TransferEndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTransferExternalEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "TransferExternalEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTransferInstanceValidationError{
					field:  "TransferExternalEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransferExternalEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTransferInstanceValidationError{
				field:  "TransferExternalEndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransferResult

	// no validation rules for TransferType

	// no validation rules for StartAsPending

	// no validation rules for StartedAsConference

	// no validation rules for DurationMicroseconds

	// no validation rules for ExternalDurationMicroseconds

	// no validation rules for PendingDurationMicroseconds

	if len(errors) > 0 {
		return ExileTransferInstanceMultiError(errors)
	}

	return nil
}

// ExileTransferInstanceMultiError is an error wrapping multiple validation
// errors returned by ExileTransferInstance.ValidateAll() if the designated
// constraints aren't met.
type ExileTransferInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExileTransferInstanceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExileTransferInstanceMultiError) AllErrors() []error { return m }

// ExileTransferInstanceValidationError is the validation error returned by
// ExileTransferInstance.Validate if the designated constraints aren't met.
type ExileTransferInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExileTransferInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExileTransferInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExileTransferInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExileTransferInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExileTransferInstanceValidationError) ErrorName() string {
	return "ExileTransferInstanceValidationError"
}

// Error satisfies the builtin error interface
func (e ExileTransferInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExileTransferInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExileTransferInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExileTransferInstanceValidationError{}

// Validate checks the field values on AgentEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AgentEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AgentEventMultiError, or
// nil if none found.
func (m *AgentEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	// no validation rules for OldState

	// no validation rules for NewState

	// no validation rules for StateChanged

	// no validation rules for TenantId

	// no validation rules for Server

	// no validation rules for AgentId

	// no validation rules for StateAge

	// no validation rules for Timestamp

	// no validation rules for Timer

	// no validation rules for TimerValue

	// no validation rules for HuntGroupId

	// no validation rules for CurrentSessionId

	// no validation rules for Monitoring

	// no validation rules for CallsCount

	// no validation rules for CallerId

	// no validation rules for Dnid

	// no validation rules for IntercomPeerId

	// no validation rules for PeerCallId

	// no validation rules for PeerCallType

	// no validation rules for Skills

	// no validation rules for AllSkills

	// no validation rules for LastSipCode

	// no validation rules for LastSipMessage

	if len(errors) > 0 {
		return AgentEventMultiError(errors)
	}

	return nil
}

// AgentEventMultiError is an error wrapping multiple validation errors
// returned by AgentEvent.ValidateAll() if the designated constraints aren't met.
type AgentEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentEventMultiError) AllErrors() []error { return m }

// AgentEventValidationError is the validation error returned by
// AgentEvent.Validate if the designated constraints aren't met.
type AgentEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentEventValidationError) ErrorName() string { return "AgentEventValidationError" }

// Error satisfies the builtin error interface
func (e AgentEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentEventValidationError{}

// Validate checks the field values on CallerEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallerEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallerEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallerEventMultiError, or
// nil if none found.
func (m *CallerEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *CallerEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	// no validation rules for OldState

	// no validation rules for NewState

	// no validation rules for StateChanged

	// no validation rules for TenantId

	// no validation rules for Server

	// no validation rules for CallId

	// no validation rules for StateAge

	// no validation rules for Timestamp

	// no validation rules for Timer

	// no validation rules for TimerValue

	// no validation rules for HuntGroupId

	// no validation rules for PeerId

	// no validation rules for PeerSessionId

	// no validation rules for CallType

	// no validation rules for Disconnecting

	// no validation rules for ConfigFolder

	// no validation rules for Counter

	// no validation rules for Skills

	// no validation rules for AllSkills

	if len(errors) > 0 {
		return CallerEventMultiError(errors)
	}

	return nil
}

// CallerEventMultiError is an error wrapping multiple validation errors
// returned by CallerEvent.ValidateAll() if the designated constraints aren't met.
type CallerEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallerEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallerEventMultiError) AllErrors() []error { return m }

// CallerEventValidationError is the validation error returned by
// CallerEvent.Validate if the designated constraints aren't met.
type CallerEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallerEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallerEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallerEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallerEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallerEventValidationError) ErrorName() string { return "CallerEventValidationError" }

// Error satisfies the builtin error interface
func (e CallerEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallerEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallerEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallerEventValidationError{}

// Validate checks the field values on Skill with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Skill) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Skill with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkillMultiError, or nil if none found.
func (m *Skill) ValidateAll() error {
	return m.validate(true)
}

func (m *Skill) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkillId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Proficiency

	if len(errors) > 0 {
		return SkillMultiError(errors)
	}

	return nil
}

// SkillMultiError is an error wrapping multiple validation errors returned by
// Skill.ValidateAll() if the designated constraints aren't met.
type SkillMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkillMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkillMultiError) AllErrors() []error { return m }

// SkillValidationError is the validation error returned by Skill.Validate if
// the designated constraints aren't met.
type SkillValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkillValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkillValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkillValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkillValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkillValidationError) ErrorName() string { return "SkillValidationError" }

// Error satisfies the builtin error interface
func (e SkillValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkill.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkillValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkillValidationError{}

// Validate checks the field values on ExileTransferInstance_Source with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExileTransferInstance_Source) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExileTransferInstance_Source with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExileTransferInstance_SourceMultiError, or nil if none found.
func (m *ExileTransferInstance_Source) ValidateAll() error {
	return m.validate(true)
}

func (m *ExileTransferInstance_Source) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExileTransferInstance_SourceValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExileTransferInstance_SourceValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExileTransferInstance_SourceValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExileTransferInstance_SourceMultiError(errors)
	}

	return nil
}

// ExileTransferInstance_SourceMultiError is an error wrapping multiple
// validation errors returned by ExileTransferInstance_Source.ValidateAll() if
// the designated constraints aren't met.
type ExileTransferInstance_SourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExileTransferInstance_SourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExileTransferInstance_SourceMultiError) AllErrors() []error { return m }

// ExileTransferInstance_SourceValidationError is the validation error returned
// by ExileTransferInstance_Source.Validate if the designated constraints
// aren't met.
type ExileTransferInstance_SourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExileTransferInstance_SourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExileTransferInstance_SourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExileTransferInstance_SourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExileTransferInstance_SourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExileTransferInstance_SourceValidationError) ErrorName() string {
	return "ExileTransferInstance_SourceValidationError"
}

// Error satisfies the builtin error interface
func (e ExileTransferInstance_SourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExileTransferInstance_Source.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExileTransferInstance_SourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExileTransferInstance_SourceValidationError{}

// Validate checks the field values on ExileTransferInstance_Destination with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExileTransferInstance_Destination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExileTransferInstance_Destination
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExileTransferInstance_DestinationMultiError, or nil if none found.
func (m *ExileTransferInstance_Destination) ValidateAll() error {
	return m.validate(true)
}

func (m *ExileTransferInstance_Destination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Skills

	switch v := m.Entity.(type) {
	case *ExileTransferInstance_Destination_Call:
		if v == nil {
			err := ExileTransferInstance_DestinationValidationError{
				field:  "Entity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCall()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExileTransferInstance_DestinationValidationError{
						field:  "Call",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExileTransferInstance_DestinationValidationError{
						field:  "Call",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExileTransferInstance_DestinationValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExileTransferInstance_Destination_Agent:
		if v == nil {
			err := ExileTransferInstance_DestinationValidationError{
				field:  "Entity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAgent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExileTransferInstance_DestinationValidationError{
						field:  "Agent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExileTransferInstance_DestinationValidationError{
						field:  "Agent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAgent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExileTransferInstance_DestinationValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExileTransferInstance_Destination_Phone:
		if v == nil {
			err := ExileTransferInstance_DestinationValidationError{
				field:  "Entity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPhone()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExileTransferInstance_DestinationValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExileTransferInstance_DestinationValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExileTransferInstance_DestinationValidationError{
					field:  "Phone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ExileTransferInstance_DestinationMultiError(errors)
	}

	return nil
}

// ExileTransferInstance_DestinationMultiError is an error wrapping multiple
// validation errors returned by
// ExileTransferInstance_Destination.ValidateAll() if the designated
// constraints aren't met.
type ExileTransferInstance_DestinationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExileTransferInstance_DestinationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExileTransferInstance_DestinationMultiError) AllErrors() []error { return m }

// ExileTransferInstance_DestinationValidationError is the validation error
// returned by ExileTransferInstance_Destination.Validate if the designated
// constraints aren't met.
type ExileTransferInstance_DestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExileTransferInstance_DestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExileTransferInstance_DestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExileTransferInstance_DestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExileTransferInstance_DestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExileTransferInstance_DestinationValidationError) ErrorName() string {
	return "ExileTransferInstance_DestinationValidationError"
}

// Error satisfies the builtin error interface
func (e ExileTransferInstance_DestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExileTransferInstance_Destination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExileTransferInstance_DestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExileTransferInstance_DestinationValidationError{}

// Validate checks the field values on ExileTransferInstance_DestinationCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExileTransferInstance_DestinationCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExileTransferInstance_DestinationCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExileTransferInstance_DestinationCallMultiError, or nil if none found.
func (m *ExileTransferInstance_DestinationCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ExileTransferInstance_DestinationCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallSid

	// no validation rules for CallType

	// no validation rules for ConversationId

	if len(errors) > 0 {
		return ExileTransferInstance_DestinationCallMultiError(errors)
	}

	return nil
}

// ExileTransferInstance_DestinationCallMultiError is an error wrapping
// multiple validation errors returned by
// ExileTransferInstance_DestinationCall.ValidateAll() if the designated
// constraints aren't met.
type ExileTransferInstance_DestinationCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExileTransferInstance_DestinationCallMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExileTransferInstance_DestinationCallMultiError) AllErrors() []error { return m }

// ExileTransferInstance_DestinationCallValidationError is the validation error
// returned by ExileTransferInstance_DestinationCall.Validate if the
// designated constraints aren't met.
type ExileTransferInstance_DestinationCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExileTransferInstance_DestinationCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExileTransferInstance_DestinationCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExileTransferInstance_DestinationCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExileTransferInstance_DestinationCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExileTransferInstance_DestinationCallValidationError) ErrorName() string {
	return "ExileTransferInstance_DestinationCallValidationError"
}

// Error satisfies the builtin error interface
func (e ExileTransferInstance_DestinationCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExileTransferInstance_DestinationCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExileTransferInstance_DestinationCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExileTransferInstance_DestinationCallValidationError{}

// Validate checks the field values on ExileTransferInstance_DestinationAgent
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExileTransferInstance_DestinationAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExileTransferInstance_DestinationAgent with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ExileTransferInstance_DestinationAgentMultiError, or nil if none found.
func (m *ExileTransferInstance_DestinationAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *ExileTransferInstance_DestinationAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionSid

	// no validation rules for PartnerAgentId

	// no validation rules for UserId

	if len(errors) > 0 {
		return ExileTransferInstance_DestinationAgentMultiError(errors)
	}

	return nil
}

// ExileTransferInstance_DestinationAgentMultiError is an error wrapping
// multiple validation errors returned by
// ExileTransferInstance_DestinationAgent.ValidateAll() if the designated
// constraints aren't met.
type ExileTransferInstance_DestinationAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExileTransferInstance_DestinationAgentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExileTransferInstance_DestinationAgentMultiError) AllErrors() []error { return m }

// ExileTransferInstance_DestinationAgentValidationError is the validation
// error returned by ExileTransferInstance_DestinationAgent.Validate if the
// designated constraints aren't met.
type ExileTransferInstance_DestinationAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExileTransferInstance_DestinationAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExileTransferInstance_DestinationAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExileTransferInstance_DestinationAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExileTransferInstance_DestinationAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExileTransferInstance_DestinationAgentValidationError) ErrorName() string {
	return "ExileTransferInstance_DestinationAgentValidationError"
}

// Error satisfies the builtin error interface
func (e ExileTransferInstance_DestinationAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExileTransferInstance_DestinationAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExileTransferInstance_DestinationAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExileTransferInstance_DestinationAgentValidationError{}

// Validate checks the field values on
// ExileTransferInstance_DestinationPhoneNumber with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExileTransferInstance_DestinationPhoneNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExileTransferInstance_DestinationPhoneNumber with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ExileTransferInstance_DestinationPhoneNumberMultiError, or nil if none found.
func (m *ExileTransferInstance_DestinationPhoneNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *ExileTransferInstance_DestinationPhoneNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return ExileTransferInstance_DestinationPhoneNumberMultiError(errors)
	}

	return nil
}

// ExileTransferInstance_DestinationPhoneNumberMultiError is an error wrapping
// multiple validation errors returned by
// ExileTransferInstance_DestinationPhoneNumber.ValidateAll() if the
// designated constraints aren't met.
type ExileTransferInstance_DestinationPhoneNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExileTransferInstance_DestinationPhoneNumberMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExileTransferInstance_DestinationPhoneNumberMultiError) AllErrors() []error { return m }

// ExileTransferInstance_DestinationPhoneNumberValidationError is the
// validation error returned by
// ExileTransferInstance_DestinationPhoneNumber.Validate if the designated
// constraints aren't met.
type ExileTransferInstance_DestinationPhoneNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExileTransferInstance_DestinationPhoneNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExileTransferInstance_DestinationPhoneNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExileTransferInstance_DestinationPhoneNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExileTransferInstance_DestinationPhoneNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExileTransferInstance_DestinationPhoneNumberValidationError) ErrorName() string {
	return "ExileTransferInstance_DestinationPhoneNumberValidationError"
}

// Error satisfies the builtin error interface
func (e ExileTransferInstance_DestinationPhoneNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExileTransferInstance_DestinationPhoneNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExileTransferInstance_DestinationPhoneNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExileTransferInstance_DestinationPhoneNumberValidationError{}

// Validate checks the field values on ExileTransferInstance_Source_SourceCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExileTransferInstance_Source_SourceCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExileTransferInstance_Source_SourceCall with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ExileTransferInstance_Source_SourceCallMultiError, or nil if none found.
func (m *ExileTransferInstance_Source_SourceCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ExileTransferInstance_Source_SourceCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallSid

	// no validation rules for CallType

	// no validation rules for PartnerAgentId

	// no validation rules for UserId

	// no validation rules for ConversationId

	// no validation rules for SessionSid

	if len(errors) > 0 {
		return ExileTransferInstance_Source_SourceCallMultiError(errors)
	}

	return nil
}

// ExileTransferInstance_Source_SourceCallMultiError is an error wrapping
// multiple validation errors returned by
// ExileTransferInstance_Source_SourceCall.ValidateAll() if the designated
// constraints aren't met.
type ExileTransferInstance_Source_SourceCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExileTransferInstance_Source_SourceCallMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExileTransferInstance_Source_SourceCallMultiError) AllErrors() []error { return m }

// ExileTransferInstance_Source_SourceCallValidationError is the validation
// error returned by ExileTransferInstance_Source_SourceCall.Validate if the
// designated constraints aren't met.
type ExileTransferInstance_Source_SourceCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExileTransferInstance_Source_SourceCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExileTransferInstance_Source_SourceCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExileTransferInstance_Source_SourceCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExileTransferInstance_Source_SourceCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExileTransferInstance_Source_SourceCallValidationError) ErrorName() string {
	return "ExileTransferInstance_Source_SourceCallValidationError"
}

// Error satisfies the builtin error interface
func (e ExileTransferInstance_Source_SourceCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExileTransferInstance_Source_SourceCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExileTransferInstance_Source_SourceCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExileTransferInstance_Source_SourceCallValidationError{}
