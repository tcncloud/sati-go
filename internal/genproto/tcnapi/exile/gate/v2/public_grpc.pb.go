// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright 2024 TCN Inc

//*
// tcnapi/exile/gate/v2/public.proto
//
// Defines the public-facing API for the Exile Gate service, which serves as the
// interface between client applications and the Operator platform.
//
// This proto file contains the definitions for services, messages, and enums
// that make up the communication protocol for the Exile system.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: tcnapi/exile/gate/v2/public.proto

// This package is the public API for the Exile Gate service.

package gatev2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GateService_GetClientConfiguration_FullMethodName        = "/tcnapi.exile.gate.v2.GateService/GetClientConfiguration"
	GateService_GetOrganizationInfo_FullMethodName           = "/tcnapi.exile.gate.v2.GateService/GetOrganizationInfo"
	GateService_RotateCertificate_FullMethodName             = "/tcnapi.exile.gate.v2.GateService/RotateCertificate"
	GateService_PollEvents_FullMethodName                    = "/tcnapi.exile.gate.v2.GateService/PollEvents"
	GateService_StreamJobs_FullMethodName                    = "/tcnapi.exile.gate.v2.GateService/StreamJobs"
	GateService_SubmitJobResults_FullMethodName              = "/tcnapi.exile.gate.v2.GateService/SubmitJobResults"
	GateService_GetAgentStatus_FullMethodName                = "/tcnapi.exile.gate.v2.GateService/GetAgentStatus"
	GateService_UpdateAgentStatus_FullMethodName             = "/tcnapi.exile.gate.v2.GateService/UpdateAgentStatus"
	GateService_ListAgents_FullMethodName                    = "/tcnapi.exile.gate.v2.GateService/ListAgents"
	GateService_UpsertAgent_FullMethodName                   = "/tcnapi.exile.gate.v2.GateService/UpsertAgent"
	GateService_GetAgentById_FullMethodName                  = "/tcnapi.exile.gate.v2.GateService/GetAgentById"
	GateService_GetAgentByPartnerId_FullMethodName           = "/tcnapi.exile.gate.v2.GateService/GetAgentByPartnerId"
	GateService_AddAgentCallResponse_FullMethodName          = "/tcnapi.exile.gate.v2.GateService/AddAgentCallResponse"
	GateService_ListHuntGroupPauseCodes_FullMethodName       = "/tcnapi.exile.gate.v2.GateService/ListHuntGroupPauseCodes"
	GateService_PutCallOnSimpleHold_FullMethodName           = "/tcnapi.exile.gate.v2.GateService/PutCallOnSimpleHold"
	GateService_TakeCallOffSimpleHold_FullMethodName         = "/tcnapi.exile.gate.v2.GateService/TakeCallOffSimpleHold"
	GateService_Dial_FullMethodName                          = "/tcnapi.exile.gate.v2.GateService/Dial"
	GateService_ListNCLRulesetNames_FullMethodName           = "/tcnapi.exile.gate.v2.GateService/ListNCLRulesetNames"
	GateService_StartCallRecording_FullMethodName            = "/tcnapi.exile.gate.v2.GateService/StartCallRecording"
	GateService_StopCallRecording_FullMethodName             = "/tcnapi.exile.gate.v2.GateService/StopCallRecording"
	GateService_GetRecordingStatus_FullMethodName            = "/tcnapi.exile.gate.v2.GateService/GetRecordingStatus"
	GateService_ListScrubLists_FullMethodName                = "/tcnapi.exile.gate.v2.GateService/ListScrubLists"
	GateService_AddScrubListEntries_FullMethodName           = "/tcnapi.exile.gate.v2.GateService/AddScrubListEntries"
	GateService_UpdateScrubListEntry_FullMethodName          = "/tcnapi.exile.gate.v2.GateService/UpdateScrubListEntry"
	GateService_RemoveScrubListEntries_FullMethodName        = "/tcnapi.exile.gate.v2.GateService/RemoveScrubListEntries"
	GateService_ListSkills_FullMethodName                    = "/tcnapi.exile.gate.v2.GateService/ListSkills"
	GateService_ListAgentSkills_FullMethodName               = "/tcnapi.exile.gate.v2.GateService/ListAgentSkills"
	GateService_AssignAgentSkill_FullMethodName              = "/tcnapi.exile.gate.v2.GateService/AssignAgentSkill"
	GateService_UnassignAgentSkill_FullMethodName            = "/tcnapi.exile.gate.v2.GateService/UnassignAgentSkill"
	GateService_Log_FullMethodName                           = "/tcnapi.exile.gate.v2.GateService/Log"
	GateService_SearchVoiceRecordings_FullMethodName         = "/tcnapi.exile.gate.v2.GateService/SearchVoiceRecordings"
	GateService_GetVoiceRecordingDownloadLink_FullMethodName = "/tcnapi.exile.gate.v2.GateService/GetVoiceRecordingDownloadLink"
	GateService_ListSearchableRecordingFields_FullMethodName = "/tcnapi.exile.gate.v2.GateService/ListSearchableRecordingFields"
	GateService_Transfer_FullMethodName                      = "/tcnapi.exile.gate.v2.GateService/Transfer"
)

// GateServiceClient is the client API for GateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// The GateService provides a set of RPCs for the Exile Gate service.
// The service requires mTLS authentication for secure client-server communications.
//
// Key responsibilities include:
// - Client configuration and organization management
// - Event handling for telephony, agent calls, and responses
// - Job streaming and result submission
// - Agent management and status tracking
// - Call control operations (dialing, recording)
// - Scrub list management for blocking specific content
type GateServiceClient interface {
	// Initial configuration retrieval for client setup
	GetClientConfiguration(ctx context.Context, in *GetClientConfigurationRequest, opts ...grpc.CallOption) (*GetClientConfigurationResponse, error)
	// Organization details retrieval
	GetOrganizationInfo(ctx context.Context, in *GetOrganizationInfoRequest, opts ...grpc.CallOption) (*GetOrganizationInfoResponse, error)
	RotateCertificate(ctx context.Context, in *RotateCertificateRequest, opts ...grpc.CallOption) (*RotateCertificateResponse, error)
	// *
	// Periodic event polling (up to 4MB)
	// This is the primary method for receiving events from the Operator platform
	// The events are ExileTelephonyResult, ExileAgentCall, and ExileAgentResponse
	PollEvents(ctx context.Context, in *PollEventsRequest, opts ...grpc.CallOption) (*PollEventsResponse, error)
	// *
	// Job streaming connection for receiving requests (jobs) from the Operator platform.
	// The connection should have the keep alive set to 10 seconds.
	// Provides a continuous stream of jobs that clients need to process.
	StreamJobs(ctx context.Context, in *StreamJobsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamJobsResponse], error)
	// *
	// Job results submission (max 2MB)
	// Used to submit results for jobs received via StreamJobs.
	// The method can be called multiple times for the same job_id until end_of_transmission is set to true.
	SubmitJobResults(ctx context.Context, in *SubmitJobResultsRequest, opts ...grpc.CallOption) (*SubmitJobResultsResponse, error)
	// Get Agent status - retrieves the current state of an agent
	GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*GetAgentStatusResponse, error)
	// Update Agent status - modifies an agent's availability state
	UpdateAgentStatus(ctx context.Context, in *UpdateAgentStatusRequest, opts ...grpc.CallOption) (*UpdateAgentStatusResponse, error)
	// List Agents - retrieves all agents in the organization as a stream
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListAgentsResponse], error)
	// Agent management - creates or updates agent information
	UpsertAgent(ctx context.Context, in *UpsertAgentRequest, opts ...grpc.CallOption) (*UpsertAgentResponse, error)
	// Get Agent by ID - retrieves agent details using internal ID
	GetAgentById(ctx context.Context, in *GetAgentByIdRequest, opts ...grpc.CallOption) (*GetAgentByIdResponse, error)
	// Get Agent by Partner ID - retrieves agent details using partner's ID system
	GetAgentByPartnerId(ctx context.Context, in *GetAgentByPartnerIdRequest, opts ...grpc.CallOption) (*GetAgentByPartnerIdResponse, error)
	// Add Agent Call Response - adds a response to an agent call that will be sent back with the
	// telephony result,
	AddAgentCallResponse(ctx context.Context, in *AddAgentCallResponseRequest, opts ...grpc.CallOption) (*AddAgentCallResponseResponse, error)
	// List Hunt Group Pause Codes - lists the pause codes defined for a hunt group
	ListHuntGroupPauseCodes(ctx context.Context, in *ListHuntGroupPauseCodesRequest, opts ...grpc.CallOption) (*ListHuntGroupPauseCodesResponse, error)
	// Put Call On Simple Hold - puts a call on simple hold
	PutCallOnSimpleHold(ctx context.Context, in *PutCallOnSimpleHoldRequest, opts ...grpc.CallOption) (*PutCallOnSimpleHoldResponse, error)
	TakeCallOffSimpleHold(ctx context.Context, in *TakeCallOffSimpleHoldRequest, opts ...grpc.CallOption) (*TakeCallOffSimpleHoldResponse, error)
	// Dial a phone number - initiates an outbound call
	Dial(ctx context.Context, in *DialRequest, opts ...grpc.CallOption) (*DialResponse, error)
	ListNCLRulesetNames(ctx context.Context, in *ListNCLRulesetNamesRequest, opts ...grpc.CallOption) (*ListNCLRulesetNamesResponse, error)
	// Start recording a call
	StartCallRecording(ctx context.Context, in *StartCallRecordingRequest, opts ...grpc.CallOption) (*StartCallRecordingResponse, error)
	// Stop recording a call
	StopCallRecording(ctx context.Context, in *StopCallRecordingRequest, opts ...grpc.CallOption) (*StopCallRecordingResponse, error)
	// Get recording status - checks if a call is currently being recorded
	GetRecordingStatus(ctx context.Context, in *GetRecordingStatusRequest, opts ...grpc.CallOption) (*GetRecordingStatusResponse, error)
	// List all available scrub lists
	ListScrubLists(ctx context.Context, in *ListScrubListsRequest, opts ...grpc.CallOption) (*ListScrubListsResponse, error)
	// Add entries to a scrub list
	AddScrubListEntries(ctx context.Context, in *AddScrubListEntriesRequest, opts ...grpc.CallOption) (*AddScrubListEntriesResponse, error)
	// Update an existing scrub list entry
	UpdateScrubListEntry(ctx context.Context, in *UpdateScrubListEntryRequest, opts ...grpc.CallOption) (*UpdateScrubListEntryResponse, error)
	// Remove entries from a scrub list
	RemoveScrubListEntries(ctx context.Context, in *RemoveScrubListEntriesRequest, opts ...grpc.CallOption) (*RemoveScrubListEntriesResponse, error)
	// List all available skills in an organization
	ListSkills(ctx context.Context, in *ListSkillsRequest, opts ...grpc.CallOption) (*ListSkillsResponse, error)
	// List all skills assigned to an agent, and their proficiency
	ListAgentSkills(ctx context.Context, in *ListAgentSkillsRequest, opts ...grpc.CallOption) (*ListAgentSkillsResponse, error)
	// Assign a skill to an agent
	AssignAgentSkill(ctx context.Context, in *AssignAgentSkillRequest, opts ...grpc.CallOption) (*AssignAgentSkillResponse, error)
	// Unassign a skill from an agent
	UnassignAgentSkill(ctx context.Context, in *UnassignAgentSkillRequest, opts ...grpc.CallOption) (*UnassignAgentSkillResponse, error)
	// *
	// Logging operations
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// Search for voice recordings
	SearchVoiceRecordings(ctx context.Context, in *SearchVoiceRecordingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchVoiceRecordingsResponse], error)
	// Get a voice recording download link
	GetVoiceRecordingDownloadLink(ctx context.Context, in *GetVoiceRecordingDownloadLinkRequest, opts ...grpc.CallOption) (*GetVoiceRecordingDownloadLinkResponse, error)
	// Get a list of allowed searchable fields
	ListSearchableRecordingFields(ctx context.Context, in *ListSearchableRecordingFieldsRequest, opts ...grpc.CallOption) (*ListSearchableRecordingFieldsResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
}

type gateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGateServiceClient(cc grpc.ClientConnInterface) GateServiceClient {
	return &gateServiceClient{cc}
}

func (c *gateServiceClient) GetClientConfiguration(ctx context.Context, in *GetClientConfigurationRequest, opts ...grpc.CallOption) (*GetClientConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientConfigurationResponse)
	err := c.cc.Invoke(ctx, GateService_GetClientConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetOrganizationInfo(ctx context.Context, in *GetOrganizationInfoRequest, opts ...grpc.CallOption) (*GetOrganizationInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationInfoResponse)
	err := c.cc.Invoke(ctx, GateService_GetOrganizationInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) RotateCertificate(ctx context.Context, in *RotateCertificateRequest, opts ...grpc.CallOption) (*RotateCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotateCertificateResponse)
	err := c.cc.Invoke(ctx, GateService_RotateCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) PollEvents(ctx context.Context, in *PollEventsRequest, opts ...grpc.CallOption) (*PollEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PollEventsResponse)
	err := c.cc.Invoke(ctx, GateService_PollEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) StreamJobs(ctx context.Context, in *StreamJobsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamJobsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GateService_ServiceDesc.Streams[0], GateService_StreamJobs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamJobsRequest, StreamJobsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GateService_StreamJobsClient = grpc.ServerStreamingClient[StreamJobsResponse]

func (c *gateServiceClient) SubmitJobResults(ctx context.Context, in *SubmitJobResultsRequest, opts ...grpc.CallOption) (*SubmitJobResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitJobResultsResponse)
	err := c.cc.Invoke(ctx, GateService_SubmitJobResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*GetAgentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentStatusResponse)
	err := c.cc.Invoke(ctx, GateService_GetAgentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateAgentStatus(ctx context.Context, in *UpdateAgentStatusRequest, opts ...grpc.CallOption) (*UpdateAgentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentStatusResponse)
	err := c.cc.Invoke(ctx, GateService_UpdateAgentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListAgentsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GateService_ServiceDesc.Streams[1], GateService_ListAgents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListAgentsRequest, ListAgentsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GateService_ListAgentsClient = grpc.ServerStreamingClient[ListAgentsResponse]

func (c *gateServiceClient) UpsertAgent(ctx context.Context, in *UpsertAgentRequest, opts ...grpc.CallOption) (*UpsertAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertAgentResponse)
	err := c.cc.Invoke(ctx, GateService_UpsertAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetAgentById(ctx context.Context, in *GetAgentByIdRequest, opts ...grpc.CallOption) (*GetAgentByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentByIdResponse)
	err := c.cc.Invoke(ctx, GateService_GetAgentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetAgentByPartnerId(ctx context.Context, in *GetAgentByPartnerIdRequest, opts ...grpc.CallOption) (*GetAgentByPartnerIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentByPartnerIdResponse)
	err := c.cc.Invoke(ctx, GateService_GetAgentByPartnerId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddAgentCallResponse(ctx context.Context, in *AddAgentCallResponseRequest, opts ...grpc.CallOption) (*AddAgentCallResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAgentCallResponseResponse)
	err := c.cc.Invoke(ctx, GateService_AddAgentCallResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ListHuntGroupPauseCodes(ctx context.Context, in *ListHuntGroupPauseCodesRequest, opts ...grpc.CallOption) (*ListHuntGroupPauseCodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHuntGroupPauseCodesResponse)
	err := c.cc.Invoke(ctx, GateService_ListHuntGroupPauseCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) PutCallOnSimpleHold(ctx context.Context, in *PutCallOnSimpleHoldRequest, opts ...grpc.CallOption) (*PutCallOnSimpleHoldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutCallOnSimpleHoldResponse)
	err := c.cc.Invoke(ctx, GateService_PutCallOnSimpleHold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) TakeCallOffSimpleHold(ctx context.Context, in *TakeCallOffSimpleHoldRequest, opts ...grpc.CallOption) (*TakeCallOffSimpleHoldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TakeCallOffSimpleHoldResponse)
	err := c.cc.Invoke(ctx, GateService_TakeCallOffSimpleHold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) Dial(ctx context.Context, in *DialRequest, opts ...grpc.CallOption) (*DialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DialResponse)
	err := c.cc.Invoke(ctx, GateService_Dial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ListNCLRulesetNames(ctx context.Context, in *ListNCLRulesetNamesRequest, opts ...grpc.CallOption) (*ListNCLRulesetNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNCLRulesetNamesResponse)
	err := c.cc.Invoke(ctx, GateService_ListNCLRulesetNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) StartCallRecording(ctx context.Context, in *StartCallRecordingRequest, opts ...grpc.CallOption) (*StartCallRecordingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartCallRecordingResponse)
	err := c.cc.Invoke(ctx, GateService_StartCallRecording_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) StopCallRecording(ctx context.Context, in *StopCallRecordingRequest, opts ...grpc.CallOption) (*StopCallRecordingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopCallRecordingResponse)
	err := c.cc.Invoke(ctx, GateService_StopCallRecording_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetRecordingStatus(ctx context.Context, in *GetRecordingStatusRequest, opts ...grpc.CallOption) (*GetRecordingStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordingStatusResponse)
	err := c.cc.Invoke(ctx, GateService_GetRecordingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ListScrubLists(ctx context.Context, in *ListScrubListsRequest, opts ...grpc.CallOption) (*ListScrubListsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScrubListsResponse)
	err := c.cc.Invoke(ctx, GateService_ListScrubLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AddScrubListEntries(ctx context.Context, in *AddScrubListEntriesRequest, opts ...grpc.CallOption) (*AddScrubListEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddScrubListEntriesResponse)
	err := c.cc.Invoke(ctx, GateService_AddScrubListEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateScrubListEntry(ctx context.Context, in *UpdateScrubListEntryRequest, opts ...grpc.CallOption) (*UpdateScrubListEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScrubListEntryResponse)
	err := c.cc.Invoke(ctx, GateService_UpdateScrubListEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) RemoveScrubListEntries(ctx context.Context, in *RemoveScrubListEntriesRequest, opts ...grpc.CallOption) (*RemoveScrubListEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveScrubListEntriesResponse)
	err := c.cc.Invoke(ctx, GateService_RemoveScrubListEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ListSkills(ctx context.Context, in *ListSkillsRequest, opts ...grpc.CallOption) (*ListSkillsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSkillsResponse)
	err := c.cc.Invoke(ctx, GateService_ListSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ListAgentSkills(ctx context.Context, in *ListAgentSkillsRequest, opts ...grpc.CallOption) (*ListAgentSkillsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentSkillsResponse)
	err := c.cc.Invoke(ctx, GateService_ListAgentSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) AssignAgentSkill(ctx context.Context, in *AssignAgentSkillRequest, opts ...grpc.CallOption) (*AssignAgentSkillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignAgentSkillResponse)
	err := c.cc.Invoke(ctx, GateService_AssignAgentSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UnassignAgentSkill(ctx context.Context, in *UnassignAgentSkillRequest, opts ...grpc.CallOption) (*UnassignAgentSkillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnassignAgentSkillResponse)
	err := c.cc.Invoke(ctx, GateService_UnassignAgentSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, GateService_Log_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) SearchVoiceRecordings(ctx context.Context, in *SearchVoiceRecordingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchVoiceRecordingsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GateService_ServiceDesc.Streams[2], GateService_SearchVoiceRecordings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchVoiceRecordingsRequest, SearchVoiceRecordingsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GateService_SearchVoiceRecordingsClient = grpc.ServerStreamingClient[SearchVoiceRecordingsResponse]

func (c *gateServiceClient) GetVoiceRecordingDownloadLink(ctx context.Context, in *GetVoiceRecordingDownloadLinkRequest, opts ...grpc.CallOption) (*GetVoiceRecordingDownloadLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVoiceRecordingDownloadLinkResponse)
	err := c.cc.Invoke(ctx, GateService_GetVoiceRecordingDownloadLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) ListSearchableRecordingFields(ctx context.Context, in *ListSearchableRecordingFieldsRequest, opts ...grpc.CallOption) (*ListSearchableRecordingFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSearchableRecordingFieldsResponse)
	err := c.cc.Invoke(ctx, GateService_ListSearchableRecordingFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, GateService_Transfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateServiceServer is the server API for GateService service.
// All implementations must embed UnimplementedGateServiceServer
// for forward compatibility.
//
// *
// The GateService provides a set of RPCs for the Exile Gate service.
// The service requires mTLS authentication for secure client-server communications.
//
// Key responsibilities include:
// - Client configuration and organization management
// - Event handling for telephony, agent calls, and responses
// - Job streaming and result submission
// - Agent management and status tracking
// - Call control operations (dialing, recording)
// - Scrub list management for blocking specific content
type GateServiceServer interface {
	// Initial configuration retrieval for client setup
	GetClientConfiguration(context.Context, *GetClientConfigurationRequest) (*GetClientConfigurationResponse, error)
	// Organization details retrieval
	GetOrganizationInfo(context.Context, *GetOrganizationInfoRequest) (*GetOrganizationInfoResponse, error)
	RotateCertificate(context.Context, *RotateCertificateRequest) (*RotateCertificateResponse, error)
	// *
	// Periodic event polling (up to 4MB)
	// This is the primary method for receiving events from the Operator platform
	// The events are ExileTelephonyResult, ExileAgentCall, and ExileAgentResponse
	PollEvents(context.Context, *PollEventsRequest) (*PollEventsResponse, error)
	// *
	// Job streaming connection for receiving requests (jobs) from the Operator platform.
	// The connection should have the keep alive set to 10 seconds.
	// Provides a continuous stream of jobs that clients need to process.
	StreamJobs(*StreamJobsRequest, grpc.ServerStreamingServer[StreamJobsResponse]) error
	// *
	// Job results submission (max 2MB)
	// Used to submit results for jobs received via StreamJobs.
	// The method can be called multiple times for the same job_id until end_of_transmission is set to true.
	SubmitJobResults(context.Context, *SubmitJobResultsRequest) (*SubmitJobResultsResponse, error)
	// Get Agent status - retrieves the current state of an agent
	GetAgentStatus(context.Context, *GetAgentStatusRequest) (*GetAgentStatusResponse, error)
	// Update Agent status - modifies an agent's availability state
	UpdateAgentStatus(context.Context, *UpdateAgentStatusRequest) (*UpdateAgentStatusResponse, error)
	// List Agents - retrieves all agents in the organization as a stream
	ListAgents(*ListAgentsRequest, grpc.ServerStreamingServer[ListAgentsResponse]) error
	// Agent management - creates or updates agent information
	UpsertAgent(context.Context, *UpsertAgentRequest) (*UpsertAgentResponse, error)
	// Get Agent by ID - retrieves agent details using internal ID
	GetAgentById(context.Context, *GetAgentByIdRequest) (*GetAgentByIdResponse, error)
	// Get Agent by Partner ID - retrieves agent details using partner's ID system
	GetAgentByPartnerId(context.Context, *GetAgentByPartnerIdRequest) (*GetAgentByPartnerIdResponse, error)
	// Add Agent Call Response - adds a response to an agent call that will be sent back with the
	// telephony result,
	AddAgentCallResponse(context.Context, *AddAgentCallResponseRequest) (*AddAgentCallResponseResponse, error)
	// List Hunt Group Pause Codes - lists the pause codes defined for a hunt group
	ListHuntGroupPauseCodes(context.Context, *ListHuntGroupPauseCodesRequest) (*ListHuntGroupPauseCodesResponse, error)
	// Put Call On Simple Hold - puts a call on simple hold
	PutCallOnSimpleHold(context.Context, *PutCallOnSimpleHoldRequest) (*PutCallOnSimpleHoldResponse, error)
	TakeCallOffSimpleHold(context.Context, *TakeCallOffSimpleHoldRequest) (*TakeCallOffSimpleHoldResponse, error)
	// Dial a phone number - initiates an outbound call
	Dial(context.Context, *DialRequest) (*DialResponse, error)
	ListNCLRulesetNames(context.Context, *ListNCLRulesetNamesRequest) (*ListNCLRulesetNamesResponse, error)
	// Start recording a call
	StartCallRecording(context.Context, *StartCallRecordingRequest) (*StartCallRecordingResponse, error)
	// Stop recording a call
	StopCallRecording(context.Context, *StopCallRecordingRequest) (*StopCallRecordingResponse, error)
	// Get recording status - checks if a call is currently being recorded
	GetRecordingStatus(context.Context, *GetRecordingStatusRequest) (*GetRecordingStatusResponse, error)
	// List all available scrub lists
	ListScrubLists(context.Context, *ListScrubListsRequest) (*ListScrubListsResponse, error)
	// Add entries to a scrub list
	AddScrubListEntries(context.Context, *AddScrubListEntriesRequest) (*AddScrubListEntriesResponse, error)
	// Update an existing scrub list entry
	UpdateScrubListEntry(context.Context, *UpdateScrubListEntryRequest) (*UpdateScrubListEntryResponse, error)
	// Remove entries from a scrub list
	RemoveScrubListEntries(context.Context, *RemoveScrubListEntriesRequest) (*RemoveScrubListEntriesResponse, error)
	// List all available skills in an organization
	ListSkills(context.Context, *ListSkillsRequest) (*ListSkillsResponse, error)
	// List all skills assigned to an agent, and their proficiency
	ListAgentSkills(context.Context, *ListAgentSkillsRequest) (*ListAgentSkillsResponse, error)
	// Assign a skill to an agent
	AssignAgentSkill(context.Context, *AssignAgentSkillRequest) (*AssignAgentSkillResponse, error)
	// Unassign a skill from an agent
	UnassignAgentSkill(context.Context, *UnassignAgentSkillRequest) (*UnassignAgentSkillResponse, error)
	// *
	// Logging operations
	Log(context.Context, *LogRequest) (*LogResponse, error)
	// Search for voice recordings
	SearchVoiceRecordings(*SearchVoiceRecordingsRequest, grpc.ServerStreamingServer[SearchVoiceRecordingsResponse]) error
	// Get a voice recording download link
	GetVoiceRecordingDownloadLink(context.Context, *GetVoiceRecordingDownloadLinkRequest) (*GetVoiceRecordingDownloadLinkResponse, error)
	// Get a list of allowed searchable fields
	ListSearchableRecordingFields(context.Context, *ListSearchableRecordingFieldsRequest) (*ListSearchableRecordingFieldsResponse, error)
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	mustEmbedUnimplementedGateServiceServer()
}

// UnimplementedGateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGateServiceServer struct{}

func (UnimplementedGateServiceServer) GetClientConfiguration(context.Context, *GetClientConfigurationRequest) (*GetClientConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientConfiguration not implemented")
}
func (UnimplementedGateServiceServer) GetOrganizationInfo(context.Context, *GetOrganizationInfoRequest) (*GetOrganizationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationInfo not implemented")
}
func (UnimplementedGateServiceServer) RotateCertificate(context.Context, *RotateCertificateRequest) (*RotateCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateCertificate not implemented")
}
func (UnimplementedGateServiceServer) PollEvents(context.Context, *PollEventsRequest) (*PollEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollEvents not implemented")
}
func (UnimplementedGateServiceServer) StreamJobs(*StreamJobsRequest, grpc.ServerStreamingServer[StreamJobsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamJobs not implemented")
}
func (UnimplementedGateServiceServer) SubmitJobResults(context.Context, *SubmitJobResultsRequest) (*SubmitJobResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJobResults not implemented")
}
func (UnimplementedGateServiceServer) GetAgentStatus(context.Context, *GetAgentStatusRequest) (*GetAgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentStatus not implemented")
}
func (UnimplementedGateServiceServer) UpdateAgentStatus(context.Context, *UpdateAgentStatusRequest) (*UpdateAgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentStatus not implemented")
}
func (UnimplementedGateServiceServer) ListAgents(*ListAgentsRequest, grpc.ServerStreamingServer[ListAgentsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedGateServiceServer) UpsertAgent(context.Context, *UpsertAgentRequest) (*UpsertAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAgent not implemented")
}
func (UnimplementedGateServiceServer) GetAgentById(context.Context, *GetAgentByIdRequest) (*GetAgentByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentById not implemented")
}
func (UnimplementedGateServiceServer) GetAgentByPartnerId(context.Context, *GetAgentByPartnerIdRequest) (*GetAgentByPartnerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentByPartnerId not implemented")
}
func (UnimplementedGateServiceServer) AddAgentCallResponse(context.Context, *AddAgentCallResponseRequest) (*AddAgentCallResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAgentCallResponse not implemented")
}
func (UnimplementedGateServiceServer) ListHuntGroupPauseCodes(context.Context, *ListHuntGroupPauseCodesRequest) (*ListHuntGroupPauseCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupPauseCodes not implemented")
}
func (UnimplementedGateServiceServer) PutCallOnSimpleHold(context.Context, *PutCallOnSimpleHoldRequest) (*PutCallOnSimpleHoldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCallOnSimpleHold not implemented")
}
func (UnimplementedGateServiceServer) TakeCallOffSimpleHold(context.Context, *TakeCallOffSimpleHoldRequest) (*TakeCallOffSimpleHoldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeCallOffSimpleHold not implemented")
}
func (UnimplementedGateServiceServer) Dial(context.Context, *DialRequest) (*DialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dial not implemented")
}
func (UnimplementedGateServiceServer) ListNCLRulesetNames(context.Context, *ListNCLRulesetNamesRequest) (*ListNCLRulesetNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNCLRulesetNames not implemented")
}
func (UnimplementedGateServiceServer) StartCallRecording(context.Context, *StartCallRecordingRequest) (*StartCallRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCallRecording not implemented")
}
func (UnimplementedGateServiceServer) StopCallRecording(context.Context, *StopCallRecordingRequest) (*StopCallRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCallRecording not implemented")
}
func (UnimplementedGateServiceServer) GetRecordingStatus(context.Context, *GetRecordingStatusRequest) (*GetRecordingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordingStatus not implemented")
}
func (UnimplementedGateServiceServer) ListScrubLists(context.Context, *ListScrubListsRequest) (*ListScrubListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScrubLists not implemented")
}
func (UnimplementedGateServiceServer) AddScrubListEntries(context.Context, *AddScrubListEntriesRequest) (*AddScrubListEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScrubListEntries not implemented")
}
func (UnimplementedGateServiceServer) UpdateScrubListEntry(context.Context, *UpdateScrubListEntryRequest) (*UpdateScrubListEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScrubListEntry not implemented")
}
func (UnimplementedGateServiceServer) RemoveScrubListEntries(context.Context, *RemoveScrubListEntriesRequest) (*RemoveScrubListEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveScrubListEntries not implemented")
}
func (UnimplementedGateServiceServer) ListSkills(context.Context, *ListSkillsRequest) (*ListSkillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkills not implemented")
}
func (UnimplementedGateServiceServer) ListAgentSkills(context.Context, *ListAgentSkillsRequest) (*ListAgentSkillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentSkills not implemented")
}
func (UnimplementedGateServiceServer) AssignAgentSkill(context.Context, *AssignAgentSkillRequest) (*AssignAgentSkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAgentSkill not implemented")
}
func (UnimplementedGateServiceServer) UnassignAgentSkill(context.Context, *UnassignAgentSkillRequest) (*UnassignAgentSkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignAgentSkill not implemented")
}
func (UnimplementedGateServiceServer) Log(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedGateServiceServer) SearchVoiceRecordings(*SearchVoiceRecordingsRequest, grpc.ServerStreamingServer[SearchVoiceRecordingsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SearchVoiceRecordings not implemented")
}
func (UnimplementedGateServiceServer) GetVoiceRecordingDownloadLink(context.Context, *GetVoiceRecordingDownloadLinkRequest) (*GetVoiceRecordingDownloadLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoiceRecordingDownloadLink not implemented")
}
func (UnimplementedGateServiceServer) ListSearchableRecordingFields(context.Context, *ListSearchableRecordingFieldsRequest) (*ListSearchableRecordingFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSearchableRecordingFields not implemented")
}
func (UnimplementedGateServiceServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedGateServiceServer) mustEmbedUnimplementedGateServiceServer() {}
func (UnimplementedGateServiceServer) testEmbeddedByValue()                     {}

// UnsafeGateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GateServiceServer will
// result in compilation errors.
type UnsafeGateServiceServer interface {
	mustEmbedUnimplementedGateServiceServer()
}

func RegisterGateServiceServer(s grpc.ServiceRegistrar, srv GateServiceServer) {
	// If the following call pancis, it indicates UnimplementedGateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GateService_ServiceDesc, srv)
}

func _GateService_GetClientConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetClientConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_GetClientConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetClientConfiguration(ctx, req.(*GetClientConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetOrganizationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetOrganizationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_GetOrganizationInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetOrganizationInfo(ctx, req.(*GetOrganizationInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_RotateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).RotateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_RotateCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).RotateCertificate(ctx, req.(*RotateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_PollEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).PollEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_PollEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).PollEvents(ctx, req.(*PollEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_StreamJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamJobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GateServiceServer).StreamJobs(m, &grpc.GenericServerStream[StreamJobsRequest, StreamJobsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GateService_StreamJobsServer = grpc.ServerStreamingServer[StreamJobsResponse]

func _GateService_SubmitJobResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).SubmitJobResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_SubmitJobResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).SubmitJobResults(ctx, req.(*SubmitJobResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_GetAgentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetAgentStatus(ctx, req.(*GetAgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_UpdateAgentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateAgentStatus(ctx, req.(*UpdateAgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ListAgents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAgentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GateServiceServer).ListAgents(m, &grpc.GenericServerStream[ListAgentsRequest, ListAgentsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GateService_ListAgentsServer = grpc.ServerStreamingServer[ListAgentsResponse]

func _GateService_UpsertAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpsertAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_UpsertAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpsertAgent(ctx, req.(*UpsertAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetAgentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetAgentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_GetAgentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetAgentById(ctx, req.(*GetAgentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetAgentByPartnerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentByPartnerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetAgentByPartnerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_GetAgentByPartnerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetAgentByPartnerId(ctx, req.(*GetAgentByPartnerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddAgentCallResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAgentCallResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddAgentCallResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_AddAgentCallResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddAgentCallResponse(ctx, req.(*AddAgentCallResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ListHuntGroupPauseCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntGroupPauseCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ListHuntGroupPauseCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_ListHuntGroupPauseCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ListHuntGroupPauseCodes(ctx, req.(*ListHuntGroupPauseCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_PutCallOnSimpleHold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutCallOnSimpleHoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).PutCallOnSimpleHold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_PutCallOnSimpleHold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).PutCallOnSimpleHold(ctx, req.(*PutCallOnSimpleHoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_TakeCallOffSimpleHold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeCallOffSimpleHoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).TakeCallOffSimpleHold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_TakeCallOffSimpleHold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).TakeCallOffSimpleHold(ctx, req.(*TakeCallOffSimpleHoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_Dial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).Dial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_Dial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).Dial(ctx, req.(*DialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ListNCLRulesetNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNCLRulesetNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ListNCLRulesetNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_ListNCLRulesetNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ListNCLRulesetNames(ctx, req.(*ListNCLRulesetNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_StartCallRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCallRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).StartCallRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_StartCallRecording_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).StartCallRecording(ctx, req.(*StartCallRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_StopCallRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCallRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).StopCallRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_StopCallRecording_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).StopCallRecording(ctx, req.(*StopCallRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetRecordingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetRecordingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_GetRecordingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetRecordingStatus(ctx, req.(*GetRecordingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ListScrubLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScrubListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ListScrubLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_ListScrubLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ListScrubLists(ctx, req.(*ListScrubListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AddScrubListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScrubListEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AddScrubListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_AddScrubListEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AddScrubListEntries(ctx, req.(*AddScrubListEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateScrubListEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScrubListEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateScrubListEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_UpdateScrubListEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateScrubListEntry(ctx, req.(*UpdateScrubListEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_RemoveScrubListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveScrubListEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).RemoveScrubListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_RemoveScrubListEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).RemoveScrubListEntries(ctx, req.(*RemoveScrubListEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ListSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ListSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_ListSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ListSkills(ctx, req.(*ListSkillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ListAgentSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentSkillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ListAgentSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_ListAgentSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ListAgentSkills(ctx, req.(*ListAgentSkillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_AssignAgentSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAgentSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).AssignAgentSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_AssignAgentSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).AssignAgentSkill(ctx, req.(*AssignAgentSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UnassignAgentSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignAgentSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UnassignAgentSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_UnassignAgentSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UnassignAgentSkill(ctx, req.(*UnassignAgentSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_SearchVoiceRecordings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchVoiceRecordingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GateServiceServer).SearchVoiceRecordings(m, &grpc.GenericServerStream[SearchVoiceRecordingsRequest, SearchVoiceRecordingsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GateService_SearchVoiceRecordingsServer = grpc.ServerStreamingServer[SearchVoiceRecordingsResponse]

func _GateService_GetVoiceRecordingDownloadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoiceRecordingDownloadLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetVoiceRecordingDownloadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_GetVoiceRecordingDownloadLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetVoiceRecordingDownloadLink(ctx, req.(*GetVoiceRecordingDownloadLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_ListSearchableRecordingFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSearchableRecordingFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).ListSearchableRecordingFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_ListSearchableRecordingFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).ListSearchableRecordingFields(ctx, req.(*ListSearchableRecordingFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateService_Transfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GateService_ServiceDesc is the grpc.ServiceDesc for GateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tcnapi.exile.gate.v2.GateService",
	HandlerType: (*GateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientConfiguration",
			Handler:    _GateService_GetClientConfiguration_Handler,
		},
		{
			MethodName: "GetOrganizationInfo",
			Handler:    _GateService_GetOrganizationInfo_Handler,
		},
		{
			MethodName: "RotateCertificate",
			Handler:    _GateService_RotateCertificate_Handler,
		},
		{
			MethodName: "PollEvents",
			Handler:    _GateService_PollEvents_Handler,
		},
		{
			MethodName: "SubmitJobResults",
			Handler:    _GateService_SubmitJobResults_Handler,
		},
		{
			MethodName: "GetAgentStatus",
			Handler:    _GateService_GetAgentStatus_Handler,
		},
		{
			MethodName: "UpdateAgentStatus",
			Handler:    _GateService_UpdateAgentStatus_Handler,
		},
		{
			MethodName: "UpsertAgent",
			Handler:    _GateService_UpsertAgent_Handler,
		},
		{
			MethodName: "GetAgentById",
			Handler:    _GateService_GetAgentById_Handler,
		},
		{
			MethodName: "GetAgentByPartnerId",
			Handler:    _GateService_GetAgentByPartnerId_Handler,
		},
		{
			MethodName: "AddAgentCallResponse",
			Handler:    _GateService_AddAgentCallResponse_Handler,
		},
		{
			MethodName: "ListHuntGroupPauseCodes",
			Handler:    _GateService_ListHuntGroupPauseCodes_Handler,
		},
		{
			MethodName: "PutCallOnSimpleHold",
			Handler:    _GateService_PutCallOnSimpleHold_Handler,
		},
		{
			MethodName: "TakeCallOffSimpleHold",
			Handler:    _GateService_TakeCallOffSimpleHold_Handler,
		},
		{
			MethodName: "Dial",
			Handler:    _GateService_Dial_Handler,
		},
		{
			MethodName: "ListNCLRulesetNames",
			Handler:    _GateService_ListNCLRulesetNames_Handler,
		},
		{
			MethodName: "StartCallRecording",
			Handler:    _GateService_StartCallRecording_Handler,
		},
		{
			MethodName: "StopCallRecording",
			Handler:    _GateService_StopCallRecording_Handler,
		},
		{
			MethodName: "GetRecordingStatus",
			Handler:    _GateService_GetRecordingStatus_Handler,
		},
		{
			MethodName: "ListScrubLists",
			Handler:    _GateService_ListScrubLists_Handler,
		},
		{
			MethodName: "AddScrubListEntries",
			Handler:    _GateService_AddScrubListEntries_Handler,
		},
		{
			MethodName: "UpdateScrubListEntry",
			Handler:    _GateService_UpdateScrubListEntry_Handler,
		},
		{
			MethodName: "RemoveScrubListEntries",
			Handler:    _GateService_RemoveScrubListEntries_Handler,
		},
		{
			MethodName: "ListSkills",
			Handler:    _GateService_ListSkills_Handler,
		},
		{
			MethodName: "ListAgentSkills",
			Handler:    _GateService_ListAgentSkills_Handler,
		},
		{
			MethodName: "AssignAgentSkill",
			Handler:    _GateService_AssignAgentSkill_Handler,
		},
		{
			MethodName: "UnassignAgentSkill",
			Handler:    _GateService_UnassignAgentSkill_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _GateService_Log_Handler,
		},
		{
			MethodName: "GetVoiceRecordingDownloadLink",
			Handler:    _GateService_GetVoiceRecordingDownloadLink_Handler,
		},
		{
			MethodName: "ListSearchableRecordingFields",
			Handler:    _GateService_ListSearchableRecordingFields_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _GateService_Transfer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamJobs",
			Handler:       _GateService_StreamJobs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAgents",
			Handler:       _GateService_ListAgents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchVoiceRecordings",
			Handler:       _GateService_SearchVoiceRecordings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tcnapi/exile/gate/v2/public.proto",
}
